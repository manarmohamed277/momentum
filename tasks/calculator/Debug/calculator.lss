
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000033aa  0000343e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800092  00800092  00003470  2**0
                  ALLOC
  3 .stab         00002d30  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f8  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000077d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b22c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b619  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bde7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 14 	call	0x28ca	; 0x28ca <main>
      8a:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <app>:
#include"../HAL/LCD_int.h"
#include "../eval.h"

int size=0;
void arrToNum(u8*ptr1,u8 n1);
void app(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	c0 54       	subi	r28, 0x40	; 64
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61

DIO_enuInit();
     b5c:	0e 94 99 06 	call	0xd32	; 0xd32 <DIO_enuInit>
LCD_enuInit();
     b60:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCD_enuInit>
 KEYPAD_Init();
     b64:	0e 94 18 0b 	call	0x1630	; 0x1630 <KEYPAD_Init>
/*enter pass*/
u8 kp_pass= KP_NO_PRESSED_KEY; u8 pass_nums=0;
     b68:	83 e4       	ldi	r24, 0x43	; 67
     b6a:	8e 8b       	std	Y+22, r24	; 0x16
     b6c:	1d 8a       	std	Y+21, r1	; 0x15

if(flag){
	_delay_ms(500);
	LCD_enuClear();
	_delay_ms(500);*/
	LCD_enuDisplayStringPOS("WELCOME",1,5);
     b6e:	80 e6       	ldi	r24, 0x60	; 96
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	45 e0       	ldi	r20, 0x05	; 5
     b76:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_enuDisplayStringPOS>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a6 e1       	ldi	r26, 0x16	; 22
     b80:	b4 e4       	ldi	r27, 0x44	; 68
     b82:	8b 87       	std	Y+11, r24	; 0x0b
     b84:	9c 87       	std	Y+12, r25	; 0x0c
     b86:	ad 87       	std	Y+13, r26	; 0x0d
     b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4a e7       	ldi	r20, 0x7A	; 122
     b98:	53 e4       	ldi	r21, 0x43	; 67
     b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8f 83       	std	Y+7, r24	; 0x07
     ba4:	98 87       	std	Y+8, r25	; 0x08
     ba6:	a9 87       	std	Y+9, r26	; 0x09
     ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     baa:	6f 81       	ldd	r22, Y+7	; 0x07
     bac:	78 85       	ldd	r23, Y+8	; 0x08
     bae:	89 85       	ldd	r24, Y+9	; 0x09
     bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	2c f4       	brge	.+10     	; 0xbcc <app+0x86>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9e 83       	std	Y+6, r25	; 0x06
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <app+0x104>
	else if (__tmp > 65535)
     bcc:	6f 81       	ldd	r22, Y+7	; 0x07
     bce:	78 85       	ldd	r23, Y+8	; 0x08
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be0:	18 16       	cp	r1, r24
     be2:	4c f5       	brge	.+82     	; 0xc36 <app+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <app+0xe6>
     c0e:	89 e1       	ldi	r24, 0x19	; 25
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <app+0xd4>
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9e 83       	std	Y+6, r25	; 0x06
     c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	69 f7       	brne	.-38     	; 0xc0e <app+0xc8>
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <app+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	6f 81       	ldd	r22, Y+7	; 0x07
     c38:	78 85       	ldd	r23, Y+8	; 0x08
     c3a:	89 85       	ldd	r24, Y+9	; 0x09
     c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9e 83       	std	Y+6, r25	; 0x06
     c48:	8d 83       	std	Y+5, r24	; 0x05
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <app+0x110>
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
	LCD_enuClear();
     c5e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <LCD_enuClear>

	// taking the first number
while(1){
	u8 kpVal;
		u8 infix[10];
		u8 i=0;
     c62:	1b 8a       	std	Y+19, r1	; 0x13

		u8 size=0;
     c64:	1a 8a       	std	Y+18, r1	; 0x12
		u8 *post;
		u8 res=9;
     c66:	89 e0       	ldi	r24, 0x09	; 9
     c68:	8f 87       	std	Y+15, r24	; 0x0f
do{
	kpVal=KEYPAD_enuGetpressedKey();
     c6a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <KEYPAD_enuGetpressedKey>
     c6e:	8c 8b       	std	Y+20, r24	; 0x14
}while(kpVal== KP_NO_PRESSED_KEY);
     c70:	8c 89       	ldd	r24, Y+20	; 0x14
     c72:	83 34       	cpi	r24, 0x43	; 67
     c74:	d1 f3       	breq	.-12     	; 0xc6a <app+0x124>

infix[i++]=kpVal;
     c76:	8b 89       	ldd	r24, Y+19	; 0x13
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	ce 01       	movw	r24, r28
     c7e:	c7 96       	adiw	r24, 0x37	; 55
     c80:	fc 01       	movw	r30, r24
     c82:	e2 0f       	add	r30, r18
     c84:	f3 1f       	adc	r31, r19
     c86:	8c 89       	ldd	r24, Y+20	; 0x14
     c88:	80 83       	st	Z, r24
     c8a:	8b 89       	ldd	r24, Y+19	; 0x13
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	8b 8b       	std	Y+19, r24	; 0x13
size++;
     c90:	8a 89       	ldd	r24, Y+18	; 0x12
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	8a 8b       	std	Y+18, r24	; 0x12
if(kpVal=='+'||kpVal=='x'||kpVal=='-'||kpVal=='%')
     c96:	8c 89       	ldd	r24, Y+20	; 0x14
     c98:	8b 32       	cpi	r24, 0x2B	; 43
     c9a:	49 f0       	breq	.+18     	; 0xcae <app+0x168>
     c9c:	8c 89       	ldd	r24, Y+20	; 0x14
     c9e:	88 37       	cpi	r24, 0x78	; 120
     ca0:	31 f0       	breq	.+12     	; 0xcae <app+0x168>
     ca2:	8c 89       	ldd	r24, Y+20	; 0x14
     ca4:	8d 32       	cpi	r24, 0x2D	; 45
     ca6:	19 f0       	breq	.+6      	; 0xcae <app+0x168>
     ca8:	8c 89       	ldd	r24, Y+20	; 0x14
     caa:	85 32       	cpi	r24, 0x25	; 37
     cac:	21 f4       	brne	.+8      	; 0xcb6 <app+0x170>
	LCD_enuDisplayChar(kpVal);
     cae:	8c 89       	ldd	r24, Y+20	; 0x14
     cb0:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_enuDisplayChar>
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <app+0x18e>
else if(kpVal!='$'&&kpVal!='=')
     cb6:	8c 89       	ldd	r24, Y+20	; 0x14
     cb8:	84 32       	cpi	r24, 0x24	; 36
     cba:	61 f0       	breq	.+24     	; 0xcd4 <app+0x18e>
     cbc:	8c 89       	ldd	r24, Y+20	; 0x14
     cbe:	8d 33       	cpi	r24, 0x3D	; 61
     cc0:	49 f0       	breq	.+18     	; 0xcd4 <app+0x18e>
LCD_enuDisplayNum(kpVal);
     cc2:	8c 89       	ldd	r24, Y+20	; 0x14
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_enuDisplayNum>
 if(kpVal=='$')
     cd4:	8c 89       	ldd	r24, Y+20	; 0x14
     cd6:	84 32       	cpi	r24, 0x24	; 36
     cd8:	19 f4       	brne	.+6      	; 0xce0 <app+0x19a>
{
     LCD_enuClear();
     cda:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <LCD_enuClear>
     cde:	c1 cf       	rjmp	.-126    	; 0xc62 <app+0x11c>
     break ;
}

if(kpVal=='='){
     ce0:	8c 89       	ldd	r24, Y+20	; 0x14
     ce2:	8d 33       	cpi	r24, 0x3D	; 61
     ce4:	09 f0       	breq	.+2      	; 0xce8 <app+0x1a2>
     ce6:	bd cf       	rjmp	.-134    	; 0xc62 <app+0x11c>
	//LCD_enuDisplayCharPOS('m',2,6);
	infix[i] = '\0';
     ce8:	8b 89       	ldd	r24, Y+19	; 0x13
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	ce 01       	movw	r24, r28
     cf0:	c7 96       	adiw	r24, 0x37	; 55
     cf2:	fc 01       	movw	r30, r24
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	10 82       	st	Z, r1
post=intoPost(infix,size);
     cfa:	ce 01       	movw	r24, r28
     cfc:	c7 96       	adiw	r24, 0x37	; 55
     cfe:	6a 89       	ldd	r22, Y+18	; 0x12
     d00:	0e 94 ab 12 	call	0x2556	; 0x2556 <intoPost>
     d04:	99 8b       	std	Y+17, r25	; 0x11
     d06:	88 8b       	std	Y+16, r24	; 0x10
res=evaluate(post);
     d08:	88 89       	ldd	r24, Y+16	; 0x10
     d0a:	99 89       	ldd	r25, Y+17	; 0x11
     d0c:	0e 94 86 13 	call	0x270c	; 0x270c <evaluate>
     d10:	8f 87       	std	Y+15, r24	; 0x0f
LCD_enuDisplayNumPOS(res,2,11);
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	42 e0       	ldi	r20, 0x02	; 2
     d22:	2b e0       	ldi	r18, 0x0B	; 11
     d24:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_enuDisplayNumPOS>
free(post);
     d28:	88 89       	ldd	r24, Y+16	; 0x10
     d2a:	99 89       	ldd	r25, Y+17	; 0x11
     d2c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <free>
     d30:	98 cf       	rjmp	.-208    	; 0xc62 <app+0x11c>

00000d32 <DIO_enuInit>:
#include"DIO_cofig.h"
#include"..\errorState.h"
#include "..\stdTypes.h"


ES_ERROR DIO_enuInit(void){
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
ES_ERROR local_enuerrorstate=ES_NOK;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01

DDRA=conc(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     d40:	ea e3       	ldi	r30, 0x3A	; 58
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	80 83       	st	Z, r24
DDRB=conc(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     d48:	e7 e3       	ldi	r30, 0x37	; 55
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	80 83       	st	Z, r24
DDRC=conc(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     d50:	e4 e3       	ldi	r30, 0x34	; 52
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	8f e0       	ldi	r24, 0x0F	; 15
     d56:	80 83       	st	Z, r24
DDRD=conc(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     d58:	e1 e3       	ldi	r30, 0x31	; 49
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	85 ed       	ldi	r24, 0xD5	; 213
     d5e:	80 83       	st	Z, r24

PORTA=conc(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     d60:	eb e3       	ldi	r30, 0x3B	; 59
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	10 82       	st	Z, r1
PORTB=conc(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     d66:	e8 e3       	ldi	r30, 0x38	; 56
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	10 82       	st	Z, r1
PORTC=conc(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     d6c:	e5 e3       	ldi	r30, 0x35	; 53
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	80 83       	st	Z, r24
PORTD=conc(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     d74:	e2 e3       	ldi	r30, 0x32	; 50
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	10 82       	st	Z, r1

    local_enuerrorstate=ES_OK;
     d7a:	19 82       	std	Y+1, r1	; 0x01

return local_enuerrorstate;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <DIO_enuSetportdir>:

ES_ERROR DIO_enuSetportdir(u8 copy_u8portid,u8 copy_u8value){
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <DIO_enuSetportdir+0x6>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <DIO_enuSetportdir+0x8>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	8a 83       	std	Y+2, r24	; 0x02
     d96:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	84 30       	cpi	r24, 0x04	; 4
     da0:	a0 f5       	brcc	.+104    	; 0xe0a <DIO_enuSetportdir+0x84>
		 switch(copy_u8portid){
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	3d 83       	std	Y+5, r19	; 0x05
     daa:	2c 83       	std	Y+4, r18	; 0x04
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	91 05       	cpc	r25, r1
     db4:	d1 f0       	breq	.+52     	; 0xdea <DIO_enuSetportdir+0x64>
     db6:	2c 81       	ldd	r18, Y+4	; 0x04
     db8:	3d 81       	ldd	r19, Y+5	; 0x05
     dba:	22 30       	cpi	r18, 0x02	; 2
     dbc:	31 05       	cpc	r19, r1
     dbe:	2c f4       	brge	.+10     	; 0xdca <DIO_enuSetportdir+0x44>
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	9d 81       	ldd	r25, Y+5	; 0x05
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	61 f0       	breq	.+24     	; 0xde0 <DIO_enuSetportdir+0x5a>
     dc8:	1e c0       	rjmp	.+60     	; 0xe06 <DIO_enuSetportdir+0x80>
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	81 f0       	breq	.+32     	; 0xdf4 <DIO_enuSetportdir+0x6e>
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	91 05       	cpc	r25, r1
     ddc:	81 f0       	breq	.+32     	; 0xdfe <DIO_enuSetportdir+0x78>
     dde:	13 c0       	rjmp	.+38     	; 0xe06 <DIO_enuSetportdir+0x80>
		 case DIO_PORTA :
			DDRA=copy_u8value;
     de0:	ea e3       	ldi	r30, 0x3A	; 58
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	80 83       	st	Z, r24
     de8:	0e c0       	rjmp	.+28     	; 0xe06 <DIO_enuSetportdir+0x80>
		   break;
		 case DIO_PORTB :
			DDRB=copy_u8value;
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	80 83       	st	Z, r24
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTC :
			DDRC=copy_u8value;
     df4:	e4 e3       	ldi	r30, 0x34	; 52
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	80 83       	st	Z, r24
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTD :
			DDRD=copy_u8value;
     dfe:	e1 e3       	ldi	r30, 0x31	; 49
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_enuSetportdir+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <DIO_enuSetportval>:



ES_ERROR DIO_enuSetportval(u8 copy_u8portid,u8 copy_u8value){
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <DIO_enuSetportval+0x6>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <DIO_enuSetportval+0x8>
     e28:	0f 92       	push	r0
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	a0 f5       	brcc	.+104    	; 0xea4 <DIO_enuSetportval+0x84>
		 switch(copy_u8portid){
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	3d 83       	std	Y+5, r19	; 0x05
     e44:	2c 83       	std	Y+4, r18	; 0x04
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	9d 81       	ldd	r25, Y+5	; 0x05
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 05       	cpc	r25, r1
     e4e:	d1 f0       	breq	.+52     	; 0xe84 <DIO_enuSetportval+0x64>
     e50:	2c 81       	ldd	r18, Y+4	; 0x04
     e52:	3d 81       	ldd	r19, Y+5	; 0x05
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	2c f4       	brge	.+10     	; 0xe64 <DIO_enuSetportval+0x44>
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	9d 81       	ldd	r25, Y+5	; 0x05
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	61 f0       	breq	.+24     	; 0xe7a <DIO_enuSetportval+0x5a>
     e62:	1e c0       	rjmp	.+60     	; 0xea0 <DIO_enuSetportval+0x80>
     e64:	2c 81       	ldd	r18, Y+4	; 0x04
     e66:	3d 81       	ldd	r19, Y+5	; 0x05
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	81 f0       	breq	.+32     	; 0xe8e <DIO_enuSetportval+0x6e>
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	91 05       	cpc	r25, r1
     e76:	81 f0       	breq	.+32     	; 0xe98 <DIO_enuSetportval+0x78>
     e78:	13 c0       	rjmp	.+38     	; 0xea0 <DIO_enuSetportval+0x80>
		 case DIO_PORTA :
			PORTA=copy_u8value;
     e7a:	eb e3       	ldi	r30, 0x3B	; 59
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	80 83       	st	Z, r24
     e82:	0e c0       	rjmp	.+28     	; 0xea0 <DIO_enuSetportval+0x80>
		   break;
		 case DIO_PORTB :
			PORTB=copy_u8value;
     e84:	e8 e3       	ldi	r30, 0x38	; 56
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	80 83       	st	Z, r24
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTC :
			PORTC=copy_u8value;
     e8e:	e5 e3       	ldi	r30, 0x35	; 53
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	80 83       	st	Z, r24
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTD :
			PORTD=copy_u8value;
     e98:	e2 e3       	ldi	r30, 0x32	; 50
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_enuSetportval+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <DIO_enuSetpindir>:
ES_ERROR DIO_enuSetpindir(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <DIO_enuSetpindir+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <DIO_enuSetpindir+0x8>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <DIO_enuSetpindir+0xa>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	6b 83       	std	Y+3, r22	; 0x03
     ecc:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	89 83       	std	Y+1, r24	; 0x01

if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	08 f0       	brcs	.+2      	; 0xeda <DIO_enuSetpindir+0x20>
     ed8:	d4 c0       	rjmp	.+424    	; 0x1082 <DIO_enuSetpindir+0x1c8>
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	88 30       	cpi	r24, 0x08	; 8
     ede:	08 f0       	brcs	.+2      	; 0xee2 <DIO_enuSetpindir+0x28>
     ee0:	d0 c0       	rjmp	.+416    	; 0x1082 <DIO_enuSetpindir+0x1c8>
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	08 f0       	brcs	.+2      	; 0xeea <DIO_enuSetpindir+0x30>
     ee8:	cc c0       	rjmp	.+408    	; 0x1082 <DIO_enuSetpindir+0x1c8>
	 if( copy_u8portid<=DIO_PORTD){
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	08 f0       	brcs	.+2      	; 0xef2 <DIO_enuSetpindir+0x38>
     ef0:	ca c0       	rjmp	.+404    	; 0x1086 <DIO_enuSetpindir+0x1cc>
			 switch(copy_u8portid){
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3e 83       	std	Y+6, r19	; 0x06
     efa:	2d 83       	std	Y+5, r18	; 0x05
     efc:	6d 81       	ldd	r22, Y+5	; 0x05
     efe:	7e 81       	ldd	r23, Y+6	; 0x06
     f00:	61 30       	cpi	r22, 0x01	; 1
     f02:	71 05       	cpc	r23, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <DIO_enuSetpindir+0x4e>
     f06:	41 c0       	rjmp	.+130    	; 0xf8a <DIO_enuSetpindir+0xd0>
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	91 05       	cpc	r25, r1
     f10:	34 f4       	brge	.+12     	; 0xf1e <DIO_enuSetpindir+0x64>
     f12:	2d 81       	ldd	r18, Y+5	; 0x05
     f14:	3e 81       	ldd	r19, Y+6	; 0x06
     f16:	21 15       	cp	r18, r1
     f18:	31 05       	cpc	r19, r1
     f1a:	71 f0       	breq	.+28     	; 0xf38 <DIO_enuSetpindir+0x7e>
     f1c:	b0 c0       	rjmp	.+352    	; 0x107e <DIO_enuSetpindir+0x1c4>
     f1e:	6d 81       	ldd	r22, Y+5	; 0x05
     f20:	7e 81       	ldd	r23, Y+6	; 0x06
     f22:	62 30       	cpi	r22, 0x02	; 2
     f24:	71 05       	cpc	r23, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <DIO_enuSetpindir+0x70>
     f28:	59 c0       	rjmp	.+178    	; 0xfdc <DIO_enuSetpindir+0x122>
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <DIO_enuSetpindir+0x7c>
     f34:	7c c0       	rjmp	.+248    	; 0x102e <DIO_enuSetpindir+0x174>
     f36:	a3 c0       	rjmp	.+326    	; 0x107e <DIO_enuSetpindir+0x1c4>
			 case DIO_PORTA :
				DDRA&=~(MASK_BIT<<copy_u8pinid);
     f38:	aa e3       	ldi	r26, 0x3A	; 58
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ea e3       	ldi	r30, 0x3A	; 58
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_enuSetpindir+0x9a>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	2a 95       	dec	r18
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_enuSetpindir+0x96>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
				DDRA|=(copy_u8value<<copy_u8pinid);
     f5e:	aa e3       	ldi	r26, 0x3A	; 58
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ea e3       	ldi	r30, 0x3A	; 58
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	b9 01       	movw	r22, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_enuSetpindir+0xc4>
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	8a 95       	dec	r24
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_enuSetpindir+0xc0>
     f82:	cb 01       	movw	r24, r22
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	7a c0       	rjmp	.+244    	; 0x107e <DIO_enuSetpindir+0x1c4>
			   break;
			 case DIO_PORTB :
					DDRB&=~(MASK_BIT<<copy_u8pinid);
     f8a:	a7 e3       	ldi	r26, 0x37	; 55
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_enuSetpindir+0xec>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	2a 95       	dec	r18
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_enuSetpindir+0xe8>
     faa:	80 95       	com	r24
     fac:	84 23       	and	r24, r20
     fae:	8c 93       	st	X, r24
				    DDRB|=(copy_u8value<<copy_u8pinid);
     fb0:	a7 e3       	ldi	r26, 0x37	; 55
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b9 01       	movw	r22, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_enuSetpindir+0x116>
     fcc:	66 0f       	add	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_enuSetpindir+0x112>
     fd4:	cb 01       	movw	r24, r22
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	51 c0       	rjmp	.+162    	; 0x107e <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTC :
				 DDRC&=~(MASK_BIT<<copy_u8pinid);
     fdc:	a4 e3       	ldi	r26, 0x34	; 52
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 e3       	ldi	r30, 0x34	; 52
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_enuSetpindir+0x13e>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	2a 95       	dec	r18
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_enuSetpindir+0x13a>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
				 DDRC|=(copy_u8value<<copy_u8pinid);
    1002:	a4 e3       	ldi	r26, 0x34	; 52
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e4 e3       	ldi	r30, 0x34	; 52
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	b9 01       	movw	r22, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_enuSetpindir+0x168>
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_enuSetpindir+0x164>
    1026:	cb 01       	movw	r24, r22
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	28 c0       	rjmp	.+80     	; 0x107e <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTD :
				 DDRD&=~(MASK_BIT<<copy_u8pinid);
    102e:	a1 e3       	ldi	r26, 0x31	; 49
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_enuSetpindir+0x190>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	2a 95       	dec	r18
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_enuSetpindir+0x18c>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
				 DDRD|=(copy_u8value<<copy_u8pinid);
    1054:	a1 e3       	ldi	r26, 0x31	; 49
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e1 e3       	ldi	r30, 0x31	; 49
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	b9 01       	movw	r22, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_enuSetpindir+0x1ba>
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	8a 95       	dec	r24
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_enuSetpindir+0x1b6>
    1078:	cb 01       	movw	r24, r22
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
				   break;
			 }
			 local_enuerrorstate=ES_OK;
    107e:	19 82       	std	Y+1, r1	; 0x01
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_enuSetpindir+0x1cc>
		 }
}
else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
}
    1088:	26 96       	adiw	r28, 0x06	; 6
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <DIO_enuSetpinval>:

ES_ERROR DIO_enuSetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <DIO_enuSetpinval+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <DIO_enuSetpinval+0x8>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_enuSetpinval+0xa>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	8a 83       	std	Y+2, r24	; 0x02
    10aa:	6b 83       	std	Y+3, r22	; 0x03
    10ac:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <DIO_enuSetpinval+0x20>
    10b8:	d0 c0       	rjmp	.+416    	; 0x125a <DIO_enuSetpinval+0x1c0>
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 30       	cpi	r24, 0x08	; 8
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <DIO_enuSetpinval+0x28>
    10c0:	cc c0       	rjmp	.+408    	; 0x125a <DIO_enuSetpinval+0x1c0>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <DIO_enuSetpinval+0x30>
    10c8:	c8 c0       	rjmp	.+400    	; 0x125a <DIO_enuSetpinval+0x1c0>

				 switch(copy_u8portid){
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3e 83       	std	Y+6, r19	; 0x06
    10d2:	2d 83       	std	Y+5, r18	; 0x05
    10d4:	6d 81       	ldd	r22, Y+5	; 0x05
    10d6:	7e 81       	ldd	r23, Y+6	; 0x06
    10d8:	61 30       	cpi	r22, 0x01	; 1
    10da:	71 05       	cpc	r23, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <DIO_enuSetpinval+0x46>
    10de:	41 c0       	rjmp	.+130    	; 0x1162 <DIO_enuSetpinval+0xc8>
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <DIO_enuSetpinval+0x5c>
    10ea:	2d 81       	ldd	r18, Y+5	; 0x05
    10ec:	3e 81       	ldd	r19, Y+6	; 0x06
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	71 f0       	breq	.+28     	; 0x1110 <DIO_enuSetpinval+0x76>
    10f4:	b0 c0       	rjmp	.+352    	; 0x1256 <DIO_enuSetpinval+0x1bc>
    10f6:	6d 81       	ldd	r22, Y+5	; 0x05
    10f8:	7e 81       	ldd	r23, Y+6	; 0x06
    10fa:	62 30       	cpi	r22, 0x02	; 2
    10fc:	71 05       	cpc	r23, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <DIO_enuSetpinval+0x68>
    1100:	59 c0       	rjmp	.+178    	; 0x11b4 <DIO_enuSetpinval+0x11a>
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <DIO_enuSetpinval+0x74>
    110c:	7c c0       	rjmp	.+248    	; 0x1206 <DIO_enuSetpinval+0x16c>
    110e:	a3 c0       	rjmp	.+326    	; 0x1256 <DIO_enuSetpinval+0x1bc>
				 case DIO_PORTA :
					PORTA&=~(MASK_BIT<<copy_u8pinid);
    1110:	ab e3       	ldi	r26, 0x3B	; 59
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_enuSetpinval+0x92>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	2a 95       	dec	r18
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_enuSetpinval+0x8e>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
					PORTA|=(copy_u8value<<copy_u8pinid);
    1136:	ab e3       	ldi	r26, 0x3B	; 59
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	eb e3       	ldi	r30, 0x3B	; 59
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	b9 01       	movw	r22, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_enuSetpinval+0xbc>
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_enuSetpinval+0xb8>
    115a:	cb 01       	movw	r24, r22
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	7a c0       	rjmp	.+244    	; 0x1256 <DIO_enuSetpinval+0x1bc>
				   break;
				 case DIO_PORTB :
						PORTB&=~(MASK_BIT<<copy_u8pinid);
    1162:	a8 e3       	ldi	r26, 0x38	; 56
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e8 e3       	ldi	r30, 0x38	; 56
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_enuSetpinval+0xe4>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	2a 95       	dec	r18
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_enuSetpinval+0xe0>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
					    PORTB|=(copy_u8value<<copy_u8pinid);
    1188:	a8 e3       	ldi	r26, 0x38	; 56
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e8 e3       	ldi	r30, 0x38	; 56
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	b9 01       	movw	r22, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_enuSetpinval+0x10e>
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_enuSetpinval+0x10a>
    11ac:	cb 01       	movw	r24, r22
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	51 c0       	rjmp	.+162    	; 0x1256 <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTC :
					 PORTC&=~(MASK_BIT<<copy_u8pinid);
    11b4:	a5 e3       	ldi	r26, 0x35	; 53
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e3       	ldi	r30, 0x35	; 53
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_enuSetpinval+0x136>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	2a 95       	dec	r18
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_enuSetpinval+0x132>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
					 PORTC|=(copy_u8value<<copy_u8pinid);
    11da:	a5 e3       	ldi	r26, 0x35	; 53
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	b9 01       	movw	r22, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_enuSetpinval+0x160>
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_enuSetpinval+0x15c>
    11fe:	cb 01       	movw	r24, r22
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	28 c0       	rjmp	.+80     	; 0x1256 <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTD :
					 PORTD&=~(MASK_BIT<<copy_u8pinid);
    1206:	a2 e3       	ldi	r26, 0x32	; 50
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e2 e3       	ldi	r30, 0x32	; 50
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_enuSetpinval+0x188>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	2a 95       	dec	r18
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_enuSetpinval+0x184>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
					 PORTD|=(copy_u8value<<copy_u8pinid);
    122c:	a2 e3       	ldi	r26, 0x32	; 50
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	b9 01       	movw	r22, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_enuSetpinval+0x1b2>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	8a 95       	dec	r24
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_enuSetpinval+0x1ae>
    1250:	cb 01       	movw	r24, r22
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_enuSetpinval+0x1c4>

	}
	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1260:	26 96       	adiw	r28, 0x06	; 6
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <DIO_enutogport>:

ES_ERROR DIO_enutogport(u8 copy_u8portid){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <DIO_enutogport+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_enutogport+0x8>
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuerrorstate=ES_NOK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01


	 if( copy_u8portid<=DIO_PORTD){
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	08 f0       	brcs	.+2      	; 0x128c <DIO_enutogport+0x1a>
    128a:	40 c0       	rjmp	.+128    	; 0x130c <DIO_enutogport+0x9a>
			 switch(copy_u8portid){
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3c 83       	std	Y+4, r19	; 0x04
    1294:	2b 83       	std	Y+3, r18	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	e9 f0       	breq	.+58     	; 0x12da <DIO_enutogport+0x68>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <DIO_enutogport+0x42>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 f0       	breq	.+24     	; 0x12ca <DIO_enutogport+0x58>
    12b2:	2a c0       	rjmp	.+84     	; 0x1308 <DIO_enutogport+0x96>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	b1 f0       	breq	.+44     	; 0x12ea <DIO_enutogport+0x78>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	c9 f0       	breq	.+50     	; 0x12fa <DIO_enutogport+0x88>
    12c8:	1f c0       	rjmp	.+62     	; 0x1308 <DIO_enutogport+0x96>
			 case DIO_PORTA :
				PORTA=~PORTA;
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 95       	com	r24
    12d6:	8c 93       	st	X, r24
    12d8:	17 c0       	rjmp	.+46     	; 0x1308 <DIO_enutogport+0x96>
			   break;
			 case DIO_PORTB :
				PORTB=~PORTB;
    12da:	a8 e3       	ldi	r26, 0x38	; 56
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	80 95       	com	r24
    12e6:	8c 93       	st	X, r24
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTC :
				PORTC=~PORTC;
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 95       	com	r24
    12f6:	8c 93       	st	X, r24
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTD :
				PORTD=~PORTD;
    12fa:	a2 e3       	ldi	r26, 0x32	; 50
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e2 e3       	ldi	r30, 0x32	; 50
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 95       	com	r24
    1306:	8c 93       	st	X, r24
				   break;
			 }
			  local_enuerrorstate=ES_OK;
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_enutogport+0x9e>
		 }
		 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <DIO_enutogpin>:

ES_ERROR DIO_enutogpin(u8 copy_u8portid,u8 copy_u8pinid){
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_enutogpin+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <DIO_enutogpin+0x8>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
    1332:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	08 f0       	brcs	.+2      	; 0x133c <DIO_enutogpin+0x1c>
    133a:	74 c0       	rjmp	.+232    	; 0x1424 <DIO_enutogpin+0x104>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 30       	cpi	r24, 0x08	; 8
    1340:	08 f0       	brcs	.+2      	; 0x1344 <DIO_enutogpin+0x24>
    1342:	70 c0       	rjmp	.+224    	; 0x1424 <DIO_enutogpin+0x104>

					 switch(copy_u8portid){
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3d 83       	std	Y+5, r19	; 0x05
    134c:	2c 83       	std	Y+4, r18	; 0x04
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	91 05       	cpc	r25, r1
    1356:	49 f1       	breq	.+82     	; 0x13aa <DIO_enutogpin+0x8a>
    1358:	2c 81       	ldd	r18, Y+4	; 0x04
    135a:	3d 81       	ldd	r19, Y+5	; 0x05
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <DIO_enutogpin+0x4c>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	61 f0       	breq	.+24     	; 0x1382 <DIO_enutogpin+0x62>
    136a:	5a c0       	rjmp	.+180    	; 0x1420 <DIO_enutogpin+0x100>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	71 f1       	breq	.+92     	; 0x13d2 <DIO_enutogpin+0xb2>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	e9 f1       	breq	.+122    	; 0x13fa <DIO_enutogpin+0xda>
    1380:	4f c0       	rjmp	.+158    	; 0x1420 <DIO_enutogpin+0x100>
					 case DIO_PORTA :
						PORTA^=(MASK_BIT<<copy_u8pinid);
    1382:	ab e3       	ldi	r26, 0x3B	; 59
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	eb e3       	ldi	r30, 0x3B	; 59
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_enutogpin+0x80>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_enutogpin+0x7c>
    13a4:	84 27       	eor	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	3b c0       	rjmp	.+118    	; 0x1420 <DIO_enutogpin+0x100>

					   break;
					 case DIO_PORTB :
						 PORTB^=(MASK_BIT<<copy_u8pinid);
    13aa:	a8 e3       	ldi	r26, 0x38	; 56
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e3       	ldi	r30, 0x38	; 56
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_enutogpin+0xa8>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_enutogpin+0xa4>
    13cc:	84 27       	eor	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	27 c0       	rjmp	.+78     	; 0x1420 <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTC :
						 PORTC^=(MASK_BIT<<copy_u8pinid);
    13d2:	a5 e3       	ldi	r26, 0x35	; 53
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_enutogpin+0xd0>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_enutogpin+0xcc>
    13f4:	84 27       	eor	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	13 c0       	rjmp	.+38     	; 0x1420 <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTD :
						 PORTD^=(MASK_BIT<<copy_u8pinid);
    13fa:	a2 e3       	ldi	r26, 0x32	; 50
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e2 e3       	ldi	r30, 0x32	; 50
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_enutogpin+0xf8>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_enutogpin+0xf4>
    141c:	84 27       	eor	r24, r20
    141e:	8c 93       	st	X, r24
						   break;
					 }
					  local_enuerrorstate=ES_OK;
    1420:	19 82       	std	Y+1, r1	; 0x01
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_enutogpin+0x108>
				 }

		else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <DIO_enugetportval>:

ES_ERROR DIO_enugetportval(u8 copy_u8portid,u8* copy_pu8value){
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_enugetportval+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_enugetportval+0x8>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_enugetportval+0xa>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	8a 83       	std	Y+2, r24	; 0x02
    144a:	7c 83       	std	Y+4, r23	; 0x04
    144c:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
    144e:	19 82       	std	Y+1, r1	; 0x01
 if(copy_pu8value!=NULL){
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	09 f4       	brne	.+2      	; 0x145a <DIO_enugetportval+0x20>
    1458:	42 c0       	rjmp	.+132    	; 0x14de <DIO_enugetportval+0xa4>
	 if( copy_u8portid<=DIO_PORTD){
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	84 30       	cpi	r24, 0x04	; 4
    145e:	e0 f5       	brcc	.+120    	; 0x14d8 <DIO_enugetportval+0x9e>
	 		 switch(copy_u8portid){
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3e 83       	std	Y+6, r19	; 0x06
    1468:	2d 83       	std	Y+5, r18	; 0x05
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	e1 f0       	breq	.+56     	; 0x14ac <DIO_enugetportval+0x72>
    1474:	2d 81       	ldd	r18, Y+5	; 0x05
    1476:	3e 81       	ldd	r19, Y+6	; 0x06
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	2c f4       	brge	.+10     	; 0x1488 <DIO_enugetportval+0x4e>
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	61 f0       	breq	.+24     	; 0x149e <DIO_enugetportval+0x64>
    1486:	26 c0       	rjmp	.+76     	; 0x14d4 <DIO_enugetportval+0x9a>
    1488:	2d 81       	ldd	r18, Y+5	; 0x05
    148a:	3e 81       	ldd	r19, Y+6	; 0x06
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	a1 f0       	breq	.+40     	; 0x14ba <DIO_enugetportval+0x80>
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	91 05       	cpc	r25, r1
    149a:	b1 f0       	breq	.+44     	; 0x14c8 <DIO_enugetportval+0x8e>
    149c:	1b c0       	rjmp	.+54     	; 0x14d4 <DIO_enugetportval+0x9a>
	 		 case DIO_PORTA :
	 			* copy_pu8value=PINA;
    149e:	e9 e3       	ldi	r30, 0x39	; 57
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	80 83       	st	Z, r24
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <DIO_enugetportval+0x9a>
	 		   break;
	 		 case DIO_PORTB :
	 			* copy_pu8value=PINB;
    14ac:	e6 e3       	ldi	r30, 0x36	; 54
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	eb 81       	ldd	r30, Y+3	; 0x03
    14b4:	fc 81       	ldd	r31, Y+4	; 0x04
    14b6:	80 83       	st	Z, r24
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTC :
	 			* copy_pu8value=PINC;
    14ba:	e3 e3       	ldi	r30, 0x33	; 51
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	eb 81       	ldd	r30, Y+3	; 0x03
    14c2:	fc 81       	ldd	r31, Y+4	; 0x04
    14c4:	80 83       	st	Z, r24
    14c6:	06 c0       	rjmp	.+12     	; 0x14d4 <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTD :
	 			* copy_pu8value=PIND;
    14c8:	e0 e3       	ldi	r30, 0x30	; 48
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	eb 81       	ldd	r30, Y+3	; 0x03
    14d0:	fc 81       	ldd	r31, Y+4	; 0x04
    14d2:	80 83       	st	Z, r24
	 			   break;
	 		 }
	 		  local_enuerrorstate=ES_OK;
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <DIO_enugetportval+0xa8>
	 	 }
	 	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DIO_enugetportval+0xa8>

	}


 else{
	 local_enuerrorstate=ES_NULL_POINTER;
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	89 83       	std	Y+1, r24	; 0x01
 }


		return local_enuerrorstate;
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e4:	26 96       	adiw	r28, 0x06	; 6
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <DIO_enugetpinval>:

ES_ERROR DIO_enugetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8* copy_pu8value){
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	27 97       	sbiw	r28, 0x07	; 7
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	6b 83       	std	Y+3, r22	; 0x03
    150e:	5d 83       	std	Y+5, r21	; 0x05
    1510:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_OK;
    1512:	19 82       	std	Y+1, r1	; 0x01
	 if(copy_pu8value!=NULL){
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	09 f4       	brne	.+2      	; 0x151e <DIO_enugetpinval+0x28>
    151c:	7d c0       	rjmp	.+250    	; 0x1618 <DIO_enugetpinval+0x122>
	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	08 f0       	brcs	.+2      	; 0x1526 <DIO_enugetpinval+0x30>
    1524:	76 c0       	rjmp	.+236    	; 0x1612 <DIO_enugetpinval+0x11c>
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	08 f0       	brcs	.+2      	; 0x152e <DIO_enugetpinval+0x38>
    152c:	72 c0       	rjmp	.+228    	; 0x1612 <DIO_enugetpinval+0x11c>

				 switch(copy_u8portid){
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3f 83       	std	Y+7, r19	; 0x07
    1536:	2e 83       	std	Y+6, r18	; 0x06
    1538:	4e 81       	ldd	r20, Y+6	; 0x06
    153a:	5f 81       	ldd	r21, Y+7	; 0x07
    153c:	41 30       	cpi	r20, 0x01	; 1
    153e:	51 05       	cpc	r21, r1
    1540:	59 f1       	breq	.+86     	; 0x1598 <DIO_enugetpinval+0xa2>
    1542:	8e 81       	ldd	r24, Y+6	; 0x06
    1544:	9f 81       	ldd	r25, Y+7	; 0x07
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	91 05       	cpc	r25, r1
    154a:	34 f4       	brge	.+12     	; 0x1558 <DIO_enugetpinval+0x62>
    154c:	2e 81       	ldd	r18, Y+6	; 0x06
    154e:	3f 81       	ldd	r19, Y+7	; 0x07
    1550:	21 15       	cp	r18, r1
    1552:	31 05       	cpc	r19, r1
    1554:	69 f0       	breq	.+26     	; 0x1570 <DIO_enugetpinval+0x7a>
    1556:	5b c0       	rjmp	.+182    	; 0x160e <DIO_enugetpinval+0x118>
    1558:	4e 81       	ldd	r20, Y+6	; 0x06
    155a:	5f 81       	ldd	r21, Y+7	; 0x07
    155c:	42 30       	cpi	r20, 0x02	; 2
    155e:	51 05       	cpc	r21, r1
    1560:	79 f1       	breq	.+94     	; 0x15c0 <DIO_enugetpinval+0xca>
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	9f 81       	ldd	r25, Y+7	; 0x07
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <DIO_enugetpinval+0x78>
    156c:	3d c0       	rjmp	.+122    	; 0x15e8 <DIO_enugetpinval+0xf2>
    156e:	4f c0       	rjmp	.+158    	; 0x160e <DIO_enugetpinval+0x118>
				 case DIO_PORTA :
					 * copy_pu8value=	(PINA>>copy_u8pinid)&MASK_BIT;
    1570:	e9 e3       	ldi	r30, 0x39	; 57
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a9 01       	movw	r20, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_enugetpinval+0x92>
    1584:	55 95       	asr	r21
    1586:	47 95       	ror	r20
    1588:	8a 95       	dec	r24
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_enugetpinval+0x8e>
    158c:	ca 01       	movw	r24, r20
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	ec 81       	ldd	r30, Y+4	; 0x04
    1592:	fd 81       	ldd	r31, Y+5	; 0x05
    1594:	80 83       	st	Z, r24
    1596:	3b c0       	rjmp	.+118    	; 0x160e <DIO_enugetpinval+0x118>
				   break;
				 case DIO_PORTB :
					 * copy_pu8value=	(PINB>>copy_u8pinid)&MASK_BIT;
    1598:	e6 e3       	ldi	r30, 0x36	; 54
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_enugetpinval+0xba>
    15ac:	55 95       	asr	r21
    15ae:	47 95       	ror	r20
    15b0:	8a 95       	dec	r24
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_enugetpinval+0xb6>
    15b4:	ca 01       	movw	r24, r20
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	ec 81       	ldd	r30, Y+4	; 0x04
    15ba:	fd 81       	ldd	r31, Y+5	; 0x05
    15bc:	80 83       	st	Z, r24
    15be:	27 c0       	rjmp	.+78     	; 0x160e <DIO_enugetpinval+0x118>
					   break;
				 case DIO_PORTC :
					 * copy_pu8value=	(PINC>>copy_u8pinid)&MASK_BIT;
    15c0:	e3 e3       	ldi	r30, 0x33	; 51
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a9 01       	movw	r20, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_enugetpinval+0xe2>
    15d4:	55 95       	asr	r21
    15d6:	47 95       	ror	r20
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_enugetpinval+0xde>
    15dc:	ca 01       	movw	r24, r20
    15de:	81 70       	andi	r24, 0x01	; 1
    15e0:	ec 81       	ldd	r30, Y+4	; 0x04
    15e2:	fd 81       	ldd	r31, Y+5	; 0x05
    15e4:	80 83       	st	Z, r24
    15e6:	13 c0       	rjmp	.+38     	; 0x160e <DIO_enugetpinval+0x118>
					   break;
				 case DIO_PORTD :
					 * copy_pu8value=	(PIND>>copy_u8pinid)&MASK_BIT;
    15e8:	e0 e3       	ldi	r30, 0x30	; 48
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a9 01       	movw	r20, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_enugetpinval+0x10a>
    15fc:	55 95       	asr	r21
    15fe:	47 95       	ror	r20
    1600:	8a 95       	dec	r24
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_enugetpinval+0x106>
    1604:	ca 01       	movw	r24, r20
    1606:	81 70       	andi	r24, 0x01	; 1
    1608:	ec 81       	ldd	r30, Y+4	; 0x04
    160a:	fd 81       	ldd	r31, Y+5	; 0x05
    160c:	80 83       	st	Z, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
    160e:	19 82       	std	Y+1, r1	; 0x01
    1610:	05 c0       	rjmp	.+10     	; 0x161c <DIO_enugetpinval+0x126>
			 }

	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}}
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_enugetpinval+0x126>
	else local_enuerrorstate=ES_NULL_POINTER;
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
}
    161e:	27 96       	adiw	r28, 0x07	; 7
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <KEYPAD_Init>:
#include "KEYPAD_config.h"
#include "KEYPAD_priv.h"



void KEYPAD_Init(void) {
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62

    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN4, DIO_u8INPUT);
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	64 e0       	ldi	r22, 0x04	; 4
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN5, DIO_u8INPUT);
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	65 e0       	ldi	r22, 0x05	; 5
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN6, DIO_u8INPUT);
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	66 e0       	ldi	r22, 0x06	; 6
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN7, DIO_u8INPUT);
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	67 e0       	ldi	r22, 0x07	; 7
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>

    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN0,  DIO_u8OUTPUT);
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN1, DIO_u8OUTPUT );
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN2, DIO_u8OUTPUT );
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN3, DIO_u8OUTPUT );
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	63 e0       	ldi	r22, 0x03	; 3
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>

    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PULLUP);
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	64 e0       	ldi	r22, 0x04	; 4
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN5, DIO_u8PULLUP);
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	65 e0       	ldi	r22, 0x05	; 5
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN6, DIO_u8PULLUP);
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	66 e0       	ldi	r22, 0x06	; 6
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PULLUP);
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	67 e0       	ldi	r22, 0x07	; 7
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <KEYPAD_enuGetpressedKey>:




u8 KEYPAD_enuGetpressedKey(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <KEYPAD_enuGetpressedKey+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <KEYPAD_enuGetpressedKey+0x8>
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62

    u8 local_u8pressedKey= KEYPAD_NO_PRESSED_KEY;
    16c4:	83 e4       	ldi	r24, 0x43	; 67
    16c6:	8b 83       	std	Y+3, r24	; 0x03
static	u8 local_u8ketpadArr[4][4]=KEYPAD_ARR;
static	u8 local_u8AkeypadColumnArr[COLUMN_NUM]={KEYPAD_COLUMN0_PIN ,KEYPAD_COLUMN1_PIN ,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
static	u8 local_u8AkeypadRowArr[ROW_NUM]={KEYPAD_ROW0_PIN ,KEYPAD_ROW1_PIN ,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	u8 local_u8ColumnIter=0;
    16c8:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8RowIter=0;
    16ca:	19 82       	std	Y+1, r1	; 0x01

  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
    16cc:	1a 82       	std	Y+2, r1	; 0x02
    16ce:	60 c0       	rjmp	.+192    	; 0x1790 <KEYPAD_enuGetpressedKey+0xda>
  {
	  //activate currant column
	   DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8LOW);
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	fc 01       	movw	r30, r24
    16d8:	e2 58       	subi	r30, 0x82	; 130
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	90 81       	ld	r25, Z
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	69 2f       	mov	r22, r25
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
	  // _delay_ms(10);
       for(local_u8RowIter=0; local_u8RowIter<ROW_NUM; local_u8RowIter++)
    16e8:	19 82       	std	Y+1, r1	; 0x01
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <KEYPAD_enuGetpressedKey+0xb4>
       {
    	   u8 local_u8RowVal=KEYPAD_NO_PRESSED_KEY;
    16ec:	83 e4       	ldi	r24, 0x43	; 67
    16ee:	8c 83       	std	Y+4, r24	; 0x04
    	   DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	fc 01       	movw	r30, r24
    16f8:	e6 58       	subi	r30, 0x86	; 134
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	90 81       	ld	r25, Z
    16fe:	9e 01       	movw	r18, r28
    1700:	2c 5f       	subi	r18, 0xFC	; 252
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	69 2f       	mov	r22, r25
    1708:	a9 01       	movw	r20, r18
    170a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <DIO_enugetpinval>

    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_u8LOW){
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	88 23       	and	r24, r24
    1712:	41 f5       	brne	.+80     	; 0x1764 <KEYPAD_enuGetpressedKey+0xae>
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	48 2f       	mov	r20, r24
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	ca 01       	movw	r24, r20
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	82 0f       	add	r24, r18
    172c:	93 1f       	adc	r25, r19
    172e:	fc 01       	movw	r30, r24
    1730:	ee 57       	subi	r30, 0x7E	; 126
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	0f c0       	rjmp	.+30     	; 0x1758 <KEYPAD_enuGetpressedKey+0xa2>
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_u8LOW)
    	    {
    	    	DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	fc 01       	movw	r30, r24
    1742:	e6 58       	subi	r30, 0x86	; 134
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	90 81       	ld	r25, Z
    1748:	9e 01       	movw	r18, r28
    174a:	2c 5f       	subi	r18, 0xFC	; 252
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	69 2f       	mov	r22, r25
    1752:	a9 01       	movw	r20, r18
    1754:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <DIO_enugetpinval>

    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_u8LOW){
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_u8LOW)
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	88 23       	and	r24, r24
    175c:	71 f3       	breq	.-36     	; 0x173a <KEYPAD_enuGetpressedKey+0x84>
    	    {
    	    	DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);


    	    }
    	   return local_u8pressedKey;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	1c c0       	rjmp	.+56     	; 0x179c <KEYPAD_enuGetpressedKey+0xe6>
  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
  {
	  //activate currant column
	   DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8LOW);
	  // _delay_ms(10);
       for(local_u8RowIter=0; local_u8RowIter<ROW_NUM; local_u8RowIter++)
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	08 f4       	brcc	.+2      	; 0x1772 <KEYPAD_enuGetpressedKey+0xbc>
    1770:	bd cf       	rjmp	.-134    	; 0x16ec <KEYPAD_enuGetpressedKey+0x36>
    	   return local_u8pressedKey;

       }
       }
       //deactivate currant column
       DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8HIGH);
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	fc 01       	movw	r30, r24
    177a:	e2 58       	subi	r30, 0x82	; 130
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	90 81       	ld	r25, Z
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	69 2f       	mov	r22, r25
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
static	u8 local_u8AkeypadRowArr[ROW_NUM]={KEYPAD_ROW0_PIN ,KEYPAD_ROW1_PIN ,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	u8 local_u8ColumnIter=0;
	u8 local_u8RowIter=0;

  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	8a 83       	std	Y+2, r24	; 0x02
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	08 f4       	brcc	.+2      	; 0x1798 <KEYPAD_enuGetpressedKey+0xe2>
    1796:	9c cf       	rjmp	.-200    	; 0x16d0 <KEYPAD_enuGetpressedKey+0x1a>
       DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8HIGH);


  }

  return local_u8pressedKey;
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	8d 83       	std	Y+5, r24	; 0x05
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <LCD_enuInit>:
#include"util/delay.h"



ES_ERROR LCD_enuInit(void)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	e9 97       	sbiw	r28, 0x39	; 57
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
	ES_ERROR local_enuErrorState = ES_OK;
    17c2:	19 ae       	std	Y+57, r1	; 0x39

local_enuErrorState|=DIO_enuSetpindir(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    17ce:	98 2f       	mov	r25, r24
    17d0:	89 ad       	ldd	r24, Y+57	; 0x39
    17d2:	89 2b       	or	r24, r25
    17d4:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    17e0:	98 2f       	mov	r25, r24
    17e2:	89 ad       	ldd	r24, Y+57	; 0x39
    17e4:	89 2b       	or	r24, r25
    17e6:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    17f2:	98 2f       	mov	r25, r24
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	89 2b       	or	r24, r25
    17f8:	89 af       	std	Y+57, r24	; 0x39

local_enuErrorState|=DIO_enuSetpindir(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    1804:	98 2f       	mov	r25, r24
    1806:	89 ad       	ldd	r24, Y+57	; 0x39
    1808:	89 2b       	or	r24, r25
    180a:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    1816:	98 2f       	mov	r25, r24
    1818:	89 ad       	ldd	r24, Y+57	; 0x39
    181a:	89 2b       	or	r24, r25
    181c:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    1828:	98 2f       	mov	r25, r24
    182a:	89 ad       	ldd	r24, Y+57	; 0x39
    182c:	89 2b       	or	r24, r25
    182e:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	63 e0       	ldi	r22, 0x03	; 3
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    183a:	98 2f       	mov	r25, r24
    183c:	89 ad       	ldd	r24, Y+57	; 0x39
    183e:	89 2b       	or	r24, r25
    1840:	89 af       	std	Y+57, r24	; 0x39
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	ac e0       	ldi	r26, 0x0C	; 12
    1848:	b2 e4       	ldi	r27, 0x42	; 66
    184a:	8d ab       	std	Y+53, r24	; 0x35
    184c:	9e ab       	std	Y+54, r25	; 0x36
    184e:	af ab       	std	Y+55, r26	; 0x37
    1850:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1852:	6d a9       	ldd	r22, Y+53	; 0x35
    1854:	7e a9       	ldd	r23, Y+54	; 0x36
    1856:	8f a9       	ldd	r24, Y+55	; 0x37
    1858:	98 ad       	ldd	r25, Y+56	; 0x38
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a e7       	ldi	r20, 0x7A	; 122
    1860:	53 e4       	ldi	r21, 0x43	; 67
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	89 ab       	std	Y+49, r24	; 0x31
    186c:	9a ab       	std	Y+50, r25	; 0x32
    186e:	ab ab       	std	Y+51, r26	; 0x33
    1870:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1872:	69 a9       	ldd	r22, Y+49	; 0x31
    1874:	7a a9       	ldd	r23, Y+50	; 0x32
    1876:	8b a9       	ldd	r24, Y+51	; 0x33
    1878:	9c a9       	ldd	r25, Y+52	; 0x34
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1886:	88 23       	and	r24, r24
    1888:	2c f4       	brge	.+10     	; 0x1894 <LCD_enuInit+0xe6>
		__ticks = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	98 ab       	std	Y+48, r25	; 0x30
    1890:	8f a7       	std	Y+47, r24	; 0x2f
    1892:	3f c0       	rjmp	.+126    	; 0x1912 <LCD_enuInit+0x164>
	else if (__tmp > 65535)
    1894:	69 a9       	ldd	r22, Y+49	; 0x31
    1896:	7a a9       	ldd	r23, Y+50	; 0x32
    1898:	8b a9       	ldd	r24, Y+51	; 0x33
    189a:	9c a9       	ldd	r25, Y+52	; 0x34
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	4c f5       	brge	.+82     	; 0x18fe <LCD_enuInit+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ac:	6d a9       	ldd	r22, Y+53	; 0x35
    18ae:	7e a9       	ldd	r23, Y+54	; 0x36
    18b0:	8f a9       	ldd	r24, Y+55	; 0x37
    18b2:	98 ad       	ldd	r25, Y+56	; 0x38
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	51 e4       	ldi	r21, 0x41	; 65
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	98 ab       	std	Y+48, r25	; 0x30
    18d2:	8f a7       	std	Y+47, r24	; 0x2f
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <LCD_enuInit+0x146>
    18d6:	89 e1       	ldi	r24, 0x19	; 25
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9e a7       	std	Y+46, r25	; 0x2e
    18dc:	8d a7       	std	Y+45, r24	; 0x2d
    18de:	8d a5       	ldd	r24, Y+45	; 0x2d
    18e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <LCD_enuInit+0x134>
    18e6:	9e a7       	std	Y+46, r25	; 0x2e
    18e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ec:	98 a9       	ldd	r25, Y+48	; 0x30
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	98 ab       	std	Y+48, r25	; 0x30
    18f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f6:	98 a9       	ldd	r25, Y+48	; 0x30
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	69 f7       	brne	.-38     	; 0x18d6 <LCD_enuInit+0x128>
    18fc:	14 c0       	rjmp	.+40     	; 0x1926 <LCD_enuInit+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1900:	7a a9       	ldd	r23, Y+50	; 0x32
    1902:	8b a9       	ldd	r24, Y+51	; 0x33
    1904:	9c a9       	ldd	r25, Y+52	; 0x34
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	98 ab       	std	Y+48, r25	; 0x30
    1910:	8f a7       	std	Y+47, r24	; 0x2f
    1912:	8f a5       	ldd	r24, Y+47	; 0x2f
    1914:	98 a9       	ldd	r25, Y+48	; 0x30
    1916:	9c a7       	std	Y+44, r25	; 0x2c
    1918:	8b a7       	std	Y+43, r24	; 0x2b
    191a:	8b a5       	ldd	r24, Y+43	; 0x2b
    191c:	9c a5       	ldd	r25, Y+44	; 0x2c
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_enuInit+0x170>
    1922:	9c a7       	std	Y+44, r25	; 0x2c
    1924:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

local_enuErrorState|=DIO_enuSetpindir(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	64 e0       	ldi	r22, 0x04	; 4
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    1930:	98 2f       	mov	r25, r24
    1932:	89 ad       	ldd	r24, Y+57	; 0x39
    1934:	89 2b       	or	r24, r25
    1936:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	65 e0       	ldi	r22, 0x05	; 5
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    1942:	98 2f       	mov	r25, r24
    1944:	89 ad       	ldd	r24, Y+57	; 0x39
    1946:	89 2b       	or	r24, r25
    1948:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	66 e0       	ldi	r22, 0x06	; 6
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    1954:	98 2f       	mov	r25, r24
    1956:	89 ad       	ldd	r24, Y+57	; 0x39
    1958:	89 2b       	or	r24, r25
    195a:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 5d 07 	call	0xeba	; 0xeba <DIO_enuSetpindir>
    1966:	98 2f       	mov	r25, r24
    1968:	89 ad       	ldd	r24, Y+57	; 0x39
    196a:	89 2b       	or	r24, r25
    196c:	89 af       	std	Y+57, r24	; 0x39

	//function set
local_enuErrorState|=LCD_INIT_SendCommend(0x38);
    196e:	88 e3       	ldi	r24, 0x38	; 56
    1970:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_INIT_SendCommend>
    1974:	98 2f       	mov	r25, r24
    1976:	89 ad       	ldd	r24, Y+57	; 0x39
    1978:	89 2b       	or	r24, r25
    197a:	89 af       	std	Y+57, r24	; 0x39
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e8       	ldi	r26, 0x80	; 128
    1982:	bf e3       	ldi	r27, 0x3F	; 63
    1984:	8f a3       	std	Y+39, r24	; 0x27
    1986:	98 a7       	std	Y+40, r25	; 0x28
    1988:	a9 a7       	std	Y+41, r26	; 0x29
    198a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6f a1       	ldd	r22, Y+39	; 0x27
    198e:	78 a5       	ldd	r23, Y+40	; 0x28
    1990:	89 a5       	ldd	r24, Y+41	; 0x29
    1992:	9a a5       	ldd	r25, Y+42	; 0x2a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a e7       	ldi	r20, 0x7A	; 122
    199a:	53 e4       	ldi	r21, 0x43	; 67
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8b a3       	std	Y+35, r24	; 0x23
    19a6:	9c a3       	std	Y+36, r25	; 0x24
    19a8:	ad a3       	std	Y+37, r26	; 0x25
    19aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_enuInit+0x220>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9a a3       	std	Y+34, r25	; 0x22
    19ca:	89 a3       	std	Y+33, r24	; 0x21
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_enuInit+0x29e>
	else if (__tmp > 65535)
    19ce:	6b a1       	ldd	r22, Y+35	; 0x23
    19d0:	7c a1       	ldd	r23, Y+36	; 0x24
    19d2:	8d a1       	ldd	r24, Y+37	; 0x25
    19d4:	9e a1       	ldd	r25, Y+38	; 0x26
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_enuInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6f a1       	ldd	r22, Y+39	; 0x27
    19e8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ea:	89 a5       	ldd	r24, Y+41	; 0x29
    19ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9a a3       	std	Y+34, r25	; 0x22
    1a0c:	89 a3       	std	Y+33, r24	; 0x21
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_enuInit+0x280>
    1a10:	89 e1       	ldi	r24, 0x19	; 25
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	98 a3       	std	Y+32, r25	; 0x20
    1a16:	8f 8f       	std	Y+31, r24	; 0x1f
    1a18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_enuInit+0x26e>
    1a20:	98 a3       	std	Y+32, r25	; 0x20
    1a22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	89 a1       	ldd	r24, Y+33	; 0x21
    1a26:	9a a1       	ldd	r25, Y+34	; 0x22
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	9a a3       	std	Y+34, r25	; 0x22
    1a2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a30:	9a a1       	ldd	r25, Y+34	; 0x22
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_enuInit+0x262>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_enuInit+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9a a3       	std	Y+34, r25	; 0x22
    1a4a:	89 a3       	std	Y+33, r24	; 0x21
    1a4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a50:	9e 8f       	std	Y+30, r25	; 0x1e
    1a52:	8d 8f       	std	Y+29, r24	; 0x1d
    1a54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_enuInit+0x2aa>
    1a5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5e:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
local_enuErrorState|=LCD_INIT_SendCommend(0x28);
#endif
	_delay_ms(1);
	local_enuErrorState|=LCD_INIT_SendCommend(0x0f);
    1a60:	8f e0       	ldi	r24, 0x0F	; 15
    1a62:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_INIT_SendCommend>
    1a66:	98 2f       	mov	r25, r24
    1a68:	89 ad       	ldd	r24, Y+57	; 0x39
    1a6a:	89 2b       	or	r24, r25
    1a6c:	89 af       	std	Y+57, r24	; 0x39
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	89 8f       	std	Y+25, r24	; 0x19
    1a78:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a e7       	ldi	r20, 0x7A	; 122
    1a8c:	53 e4       	ldi	r21, 0x43	; 67
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8d 8b       	std	Y+21, r24	; 0x15
    1a98:	9e 8b       	std	Y+22, r25	; 0x16
    1a9a:	af 8b       	std	Y+23, r26	; 0x17
    1a9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_enuInit+0x312>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9c 8b       	std	Y+20, r25	; 0x14
    1abc:	8b 8b       	std	Y+19, r24	; 0x13
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_enuInit+0x390>
	else if (__tmp > 65535)
    1ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_enuInit+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9c 8b       	std	Y+20, r25	; 0x14
    1afe:	8b 8b       	std	Y+19, r24	; 0x13
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_enuInit+0x372>
    1b02:	89 e1       	ldi	r24, 0x19	; 25
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9a 8b       	std	Y+18, r25	; 0x12
    1b08:	89 8b       	std	Y+17, r24	; 0x11
    1b0a:	89 89       	ldd	r24, Y+17	; 0x11
    1b0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_enuInit+0x360>
    1b12:	9a 8b       	std	Y+18, r25	; 0x12
    1b14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8b 89       	ldd	r24, Y+19	; 0x13
    1b18:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8b 89       	ldd	r24, Y+19	; 0x13
    1b22:	9c 89       	ldd	r25, Y+20	; 0x14
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_enuInit+0x354>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_enuInit+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b30:	98 8d       	ldd	r25, Y+24	; 0x18
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9c 8b       	std	Y+20, r25	; 0x14
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
    1b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b40:	9c 89       	ldd	r25, Y+20	; 0x14
    1b42:	98 8b       	std	Y+16, r25	; 0x10
    1b44:	8f 87       	std	Y+15, r24	; 0x0f
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	98 89       	ldd	r25, Y+16	; 0x10
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_enuInit+0x39c>
    1b4e:	98 8b       	std	Y+16, r25	; 0x10
    1b50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	local_enuErrorState|=LCD_INIT_SendCommend(0x01);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_INIT_SendCommend>
    1b58:	98 2f       	mov	r25, r24
    1b5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b5c:	89 2b       	or	r24, r25
    1b5e:	89 af       	std	Y+57, r24	; 0x39
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e0       	ldi	r26, 0x00	; 0
    1b66:	b0 e4       	ldi	r27, 0x40	; 64
    1b68:	8b 87       	std	Y+11, r24	; 0x0b
    1b6a:	9c 87       	std	Y+12, r25	; 0x0c
    1b6c:	ad 87       	std	Y+13, r26	; 0x0d
    1b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	53 e4       	ldi	r21, 0x43	; 67
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8f 83       	std	Y+7, r24	; 0x07
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	a9 87       	std	Y+9, r26	; 0x09
    1b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <LCD_enuInit+0x404>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <LCD_enuInit+0x482>
	else if (__tmp > 65535)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <LCD_enuInit+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <LCD_enuInit+0x464>
    1bf4:	89 e1       	ldi	r24, 0x19	; 25
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_enuInit+0x452>
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <LCD_enuInit+0x446>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <LCD_enuInit+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_enuInit+0x48e>
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	local_enuErrorState|=LCD_INIT_SendCommend(0x06);
    1c44:	86 e0       	ldi	r24, 0x06	; 6
    1c46:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_INIT_SendCommend>
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c4e:	89 2b       	or	r24, r25
    1c50:	89 af       	std	Y+57, r24	; 0x39





	return local_enuErrorState;
    1c52:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1c54:	e9 96       	adiw	r28, 0x39	; 57
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <LCD_enuDisplayChar>:

ES_ERROR LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <LCD_enuDisplayChar+0x6>
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	8a 83       	std	Y+2, r24	; 0x02

	//LCD_setCusor( copyu8_row, copy_u8_column);
	ES_ERROR local_enuErrorState = ES_OK;
    1c72:	19 82       	std	Y+1, r1	; 0x01

local_enuErrorState|=	DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8HIGH);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	62 e0       	ldi	r22, 0x02	; 2
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1c7e:	98 2f       	mov	r25, r24
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	89 2b       	or	r24, r25
    1c84:	89 83       	std	Y+1, r24	; 0x01

local_enuErrorState|=LCD_inerSendData(Copy_u8Data);
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_inerSendData>
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	89 2b       	or	r24, r25
    1c92:	89 83       	std	Y+1, r24	; 0x01

	return local_enuErrorState;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <LCD_enuSendCommand>:

ES_ERROR LCD_enuSendCommand(u8 Copy_u8Command)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <LCD_enuSendCommand+0x6>
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuErrorState = ES_OK;
    1cac:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	local_enuErrorState|=DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8LOW);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1cb8:	98 2f       	mov	r25, r24
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	89 2b       	or	r24, r25
    1cbe:	89 83       	std	Y+1, r24	; 0x01

	local_enuErrorState|=LCD_inerSendData(Copy_u8Command);
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_inerSendData>
    1cc6:	98 2f       	mov	r25, r24
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	89 2b       	or	r24, r25
    1ccc:	89 83       	std	Y+1, r24	; 0x01


	return local_enuErrorState;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <LCD_inerSendData>:

static ES_ERROR LCD_inerSendData(u8 Copy_u8Data)
{    ES_ERROR local_enuErrorState=ES_OK;
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	6e 97       	sbiw	r28, 0x1e	; 30
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	8e 8f       	std	Y+30, r24	; 0x1e
    1cf0:	1d 8e       	std	Y+29, r1	; 0x1d
	// set rw as write operation , EN is low
local_enuErrorState|=DIO_enuSetpinval(RW_PORT , RW_PIN , DIO_u8LOW);
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d00:	89 2b       	or	r24, r25
    1d02:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1d0e:	98 2f       	mov	r25, r24
    1d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d12:	89 2b       	or	r24, r25
    1d14:	8d 8f       	std	Y+29, r24	; 0x1d
	//write Data
local_enuErrorState|=DIO_enuSetpinval(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1d16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d18:	98 2f       	mov	r25, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	99 27       	eor	r25, r25
    1d1e:	99 1f       	adc	r25, r25
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	49 2f       	mov	r20, r25
    1d26:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1d2a:	98 2f       	mov	r25, r24
    1d2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d2e:	89 2b       	or	r24, r25
    1d30:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1d32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d34:	82 95       	swap	r24
    1d36:	86 95       	lsr	r24
    1d38:	86 95       	lsr	r24
    1d3a:	83 70       	andi	r24, 0x03	; 3
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	91 70       	andi	r25, 0x01	; 1
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	49 2f       	mov	r20, r25
    1d46:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4e:	89 2b       	or	r24, r25
    1d50:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1d52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d54:	82 95       	swap	r24
    1d56:	86 95       	lsr	r24
    1d58:	87 70       	andi	r24, 0x07	; 7
    1d5a:	98 2f       	mov	r25, r24
    1d5c:	91 70       	andi	r25, 0x01	; 1
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	49 2f       	mov	r20, r25
    1d64:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1d68:	98 2f       	mov	r25, r24
    1d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6c:	89 2b       	or	r24, r25
    1d6e:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1d70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d72:	82 95       	swap	r24
    1d74:	8f 70       	andi	r24, 0x0F	; 15
    1d76:	98 2f       	mov	r25, r24
    1d78:	91 70       	andi	r25, 0x01	; 1
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	63 e0       	ldi	r22, 0x03	; 3
    1d7e:	49 2f       	mov	r20, r25
    1d80:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1d84:	98 2f       	mov	r25, r24
    1d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d88:	89 2b       	or	r24, r25
    1d8a:	8d 8f       	std	Y+29, r24	; 0x1d

#if LCD_MODE == EIGHT_BIT

local_enuErrorState|=DIO_enuSetpinval(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1d8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d8e:	86 95       	lsr	r24
    1d90:	86 95       	lsr	r24
    1d92:	86 95       	lsr	r24
    1d94:	98 2f       	mov	r25, r24
    1d96:	91 70       	andi	r25, 0x01	; 1
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	64 e0       	ldi	r22, 0x04	; 4
    1d9c:	49 2f       	mov	r20, r25
    1d9e:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1da2:	98 2f       	mov	r25, r24
    1da4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da6:	89 2b       	or	r24, r25
    1da8:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dac:	86 95       	lsr	r24
    1dae:	86 95       	lsr	r24
    1db0:	98 2f       	mov	r25, r24
    1db2:	91 70       	andi	r25, 0x01	; 1
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	65 e0       	ldi	r22, 0x05	; 5
    1db8:	49 2f       	mov	r20, r25
    1dba:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1dbe:	98 2f       	mov	r25, r24
    1dc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc2:	89 2b       	or	r24, r25
    1dc4:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1dc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dc8:	86 95       	lsr	r24
    1dca:	98 2f       	mov	r25, r24
    1dcc:	91 70       	andi	r25, 0x01	; 1
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	66 e0       	ldi	r22, 0x06	; 6
    1dd2:	49 2f       	mov	r20, r25
    1dd4:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1dd8:	98 2f       	mov	r25, r24
    1dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ddc:	89 2b       	or	r24, r25
    1dde:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1de0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1de2:	98 2f       	mov	r25, r24
    1de4:	91 70       	andi	r25, 0x01	; 1
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	67 e0       	ldi	r22, 0x07	; 7
    1dea:	49 2f       	mov	r20, r25
    1dec:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1df0:	98 2f       	mov	r25, r24
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	89 2b       	or	r24, r25
    1df6:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT

#endif

	// Enable latch
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8HIGH);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1e02:	98 2f       	mov	r25, r24
    1e04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e06:	89 2b       	or	r24, r25
    1e08:	8d 8f       	std	Y+29, r24	; 0x1d
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 e2       	ldi	r26, 0x20	; 32
    1e10:	b1 e4       	ldi	r27, 0x41	; 65
    1e12:	89 8f       	std	Y+25, r24	; 0x19
    1e14:	9a 8f       	std	Y+26, r25	; 0x1a
    1e16:	ab 8f       	std	Y+27, r26	; 0x1b
    1e18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a e7       	ldi	r20, 0x7A	; 122
    1e28:	53 e4       	ldi	r21, 0x43	; 67
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	8d 8b       	std	Y+21, r24	; 0x15
    1e34:	9e 8b       	std	Y+22, r25	; 0x16
    1e36:	af 8b       	std	Y+23, r26	; 0x17
    1e38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e40:	98 8d       	ldd	r25, Y+24	; 0x18
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <LCD_inerSendData+0x182>
		__ticks = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 8b       	std	Y+20, r25	; 0x14
    1e58:	8b 8b       	std	Y+19, r24	; 0x13
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <LCD_inerSendData+0x200>
	else if (__tmp > 65535)
    1e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e60:	8f 89       	ldd	r24, Y+23	; 0x17
    1e62:	98 8d       	ldd	r25, Y+24	; 0x18
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	4c f5       	brge	.+82     	; 0x1ec6 <LCD_inerSendData+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	69 8d       	ldd	r22, Y+25	; 0x19
    1e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <LCD_inerSendData+0x1e2>
    1e9e:	89 e1       	ldi	r24, 0x19	; 25
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9a 8b       	std	Y+18, r25	; 0x12
    1ea4:	89 8b       	std	Y+17, r24	; 0x11
    1ea6:	89 89       	ldd	r24, Y+17	; 0x11
    1ea8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_inerSendData+0x1d0>
    1eae:	9a 8b       	std	Y+18, r25	; 0x12
    1eb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	9c 8b       	std	Y+20, r25	; 0x14
    1eba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f7       	brne	.-38     	; 0x1e9e <LCD_inerSendData+0x1c4>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <LCD_inerSendData+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9c 8b       	std	Y+20, r25	; 0x14
    1ed8:	8b 8b       	std	Y+19, r24	; 0x13
    1eda:	8b 89       	ldd	r24, Y+19	; 0x13
    1edc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ede:	98 8b       	std	Y+16, r25	; 0x10
    1ee0:	8f 87       	std	Y+15, r24	; 0x0f
    1ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee4:	98 89       	ldd	r25, Y+16	; 0x10
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_inerSendData+0x20c>
    1eea:	98 8b       	std	Y+16, r25	; 0x10
    1eec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    1ef8:	98 2f       	mov	r25, r24
    1efa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1efc:	89 2b       	or	r24, r25
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e2       	ldi	r26, 0x20	; 32
    1f06:	b1 e4       	ldi	r27, 0x41	; 65
    1f08:	8b 87       	std	Y+11, r24	; 0x0b
    1f0a:	9c 87       	std	Y+12, r25	; 0x0c
    1f0c:	ad 87       	std	Y+13, r26	; 0x0d
    1f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8f 83       	std	Y+7, r24	; 0x07
    1f2a:	98 87       	std	Y+8, r25	; 0x08
    1f2c:	a9 87       	std	Y+9, r26	; 0x09
    1f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <LCD_inerSendData+0x278>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <LCD_inerSendData+0x2f6>
	else if (__tmp > 65535)
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <LCD_inerSendData+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_inerSendData+0x2d8>
    1f94:	89 e1       	ldi	r24, 0x19	; 25
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_inerSendData+0x2c6>
    1fa4:	9c 83       	std	Y+4, r25	; 0x04
    1fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <LCD_inerSendData+0x2ba>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <LCD_inerSendData+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	9a 81       	ldd	r25, Y+2	; 0x02
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_inerSendData+0x302>
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
	return local_enuErrorState;
    1fe4:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1fe6:	6e 96       	adiw	r28, 0x1e	; 30
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <LCD_INIT_SendCommend>:


static inline ES_ERROR LCD_INIT_SendCommend(u8 Copy_u8Command)
{      ES_ERROR local_enuErrorState=ES_OK;
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	60 97       	sbiw	r28, 0x10	; 16
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	88 8b       	std	Y+16, r24	; 0x10
    200e:	1f 86       	std	Y+15, r1	; 0x0f
	// set rs as command
local_enuErrorState|=DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8LOW);
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	62 e0       	ldi	r22, 0x02	; 2
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    201a:	98 2f       	mov	r25, r24
    201c:	8f 85       	ldd	r24, Y+15	; 0x0f
    201e:	89 2b       	or	r24, r25
    2020:	8f 87       	std	Y+15, r24	; 0x0f
	// set rw as write operation , EN is low
local_enuErrorState|=DIO_enuSetpinval(RW_PORT , RW_PIN , DIO_u8LOW);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    202c:	98 2f       	mov	r25, r24
    202e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2030:	89 2b       	or	r24, r25
    2032:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    203e:	98 2f       	mov	r25, r24
    2040:	8f 85       	ldd	r24, Y+15	; 0x0f
    2042:	89 2b       	or	r24, r25
    2044:	8f 87       	std	Y+15, r24	; 0x0f
	//write Data
local_enuErrorState|=DIO_enuSetpinval(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2046:	88 89       	ldd	r24, Y+16	; 0x10
    2048:	98 2f       	mov	r25, r24
    204a:	99 1f       	adc	r25, r25
    204c:	99 27       	eor	r25, r25
    204e:	99 1f       	adc	r25, r25
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	49 2f       	mov	r20, r25
    2056:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    205a:	98 2f       	mov	r25, r24
    205c:	8f 85       	ldd	r24, Y+15	; 0x0f
    205e:	89 2b       	or	r24, r25
    2060:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2062:	88 89       	ldd	r24, Y+16	; 0x10
    2064:	82 95       	swap	r24
    2066:	86 95       	lsr	r24
    2068:	86 95       	lsr	r24
    206a:	83 70       	andi	r24, 0x03	; 3
    206c:	98 2f       	mov	r25, r24
    206e:	91 70       	andi	r25, 0x01	; 1
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	49 2f       	mov	r20, r25
    2076:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    207a:	98 2f       	mov	r25, r24
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	89 2b       	or	r24, r25
    2080:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2082:	88 89       	ldd	r24, Y+16	; 0x10
    2084:	82 95       	swap	r24
    2086:	86 95       	lsr	r24
    2088:	87 70       	andi	r24, 0x07	; 7
    208a:	98 2f       	mov	r25, r24
    208c:	91 70       	andi	r25, 0x01	; 1
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	62 e0       	ldi	r22, 0x02	; 2
    2092:	49 2f       	mov	r20, r25
    2094:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    2098:	98 2f       	mov	r25, r24
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	89 2b       	or	r24, r25
    209e:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    20a0:	88 89       	ldd	r24, Y+16	; 0x10
    20a2:	82 95       	swap	r24
    20a4:	8f 70       	andi	r24, 0x0F	; 15
    20a6:	98 2f       	mov	r25, r24
    20a8:	91 70       	andi	r25, 0x01	; 1
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	63 e0       	ldi	r22, 0x03	; 3
    20ae:	49 2f       	mov	r20, r25
    20b0:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    20b4:	98 2f       	mov	r25, r24
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	89 2b       	or	r24, r25
    20ba:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == EIGHT_BIT
local_enuErrorState|=DIO_enuSetpinval(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    20bc:	88 89       	ldd	r24, Y+16	; 0x10
    20be:	86 95       	lsr	r24
    20c0:	86 95       	lsr	r24
    20c2:	86 95       	lsr	r24
    20c4:	98 2f       	mov	r25, r24
    20c6:	91 70       	andi	r25, 0x01	; 1
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	49 2f       	mov	r20, r25
    20ce:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    20d2:	98 2f       	mov	r25, r24
    20d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d6:	89 2b       	or	r24, r25
    20d8:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    20da:	88 89       	ldd	r24, Y+16	; 0x10
    20dc:	86 95       	lsr	r24
    20de:	86 95       	lsr	r24
    20e0:	98 2f       	mov	r25, r24
    20e2:	91 70       	andi	r25, 0x01	; 1
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	65 e0       	ldi	r22, 0x05	; 5
    20e8:	49 2f       	mov	r20, r25
    20ea:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    20ee:	98 2f       	mov	r25, r24
    20f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f2:	89 2b       	or	r24, r25
    20f4:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    20f6:	88 89       	ldd	r24, Y+16	; 0x10
    20f8:	86 95       	lsr	r24
    20fa:	98 2f       	mov	r25, r24
    20fc:	91 70       	andi	r25, 0x01	; 1
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	66 e0       	ldi	r22, 0x06	; 6
    2102:	49 2f       	mov	r20, r25
    2104:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    2108:	98 2f       	mov	r25, r24
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	89 2b       	or	r24, r25
    210e:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2110:	88 89       	ldd	r24, Y+16	; 0x10
    2112:	98 2f       	mov	r25, r24
    2114:	91 70       	andi	r25, 0x01	; 1
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	67 e0       	ldi	r22, 0x07	; 7
    211a:	49 2f       	mov	r20, r25
    211c:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    2120:	98 2f       	mov	r25, r24
    2122:	8f 85       	ldd	r24, Y+15	; 0x0f
    2124:	89 2b       	or	r24, r25
    2126:	8f 87       	std	Y+15, r24	; 0x0f
#elif  LCD_MODE == FOUR_BIT

#endif
	// Enable latch
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8HIGH);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    2132:	98 2f       	mov	r25, r24
    2134:	8f 85       	ldd	r24, Y+15	; 0x0f
    2136:	89 2b       	or	r24, r25
    2138:	8f 87       	std	Y+15, r24	; 0x0f
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e2       	ldi	r26, 0x20	; 32
    2140:	b1 e4       	ldi	r27, 0x41	; 65
    2142:	8b 87       	std	Y+11, r24	; 0x0b
    2144:	9c 87       	std	Y+12, r25	; 0x0c
    2146:	ad 87       	std	Y+13, r26	; 0x0d
    2148:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	6b 85       	ldd	r22, Y+11	; 0x0b
    214c:	7c 85       	ldd	r23, Y+12	; 0x0c
    214e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2150:	9e 85       	ldd	r25, Y+14	; 0x0e
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a e7       	ldi	r20, 0x7A	; 122
    2158:	53 e4       	ldi	r21, 0x43	; 67
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8f 83       	std	Y+7, r24	; 0x07
    2164:	98 87       	std	Y+8, r25	; 0x08
    2166:	a9 87       	std	Y+9, r26	; 0x09
    2168:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <LCD_INIT_SendCommend+0x194>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	3f c0       	rjmp	.+126    	; 0x220a <LCD_INIT_SendCommend+0x212>
	else if (__tmp > 65535)
    218c:	6f 81       	ldd	r22, Y+7	; 0x07
    218e:	78 85       	ldd	r23, Y+8	; 0x08
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <LCD_INIT_SendCommend+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <LCD_INIT_SendCommend+0x1f4>
    21ce:	89 e1       	ldi	r24, 0x19	; 25
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_INIT_SendCommend+0x1e2>
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <LCD_INIT_SendCommend+0x1d6>
    21f4:	14 c0       	rjmp	.+40     	; 0x221e <LCD_INIT_SendCommend+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_INIT_SendCommend+0x21e>
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    2228:	98 2f       	mov	r25, r24
    222a:	8f 85       	ldd	r24, Y+15	; 0x0f
    222c:	89 2b       	or	r24, r25
    222e:	8f 87       	std	Y+15, r24	; 0x0f
return local_enuErrorState;
    2230:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2232:	60 96       	adiw	r28, 0x10	; 16
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <LCD_enuDisplayString>:


ES_ERROR LCD_enuDisplayString(u8 *pcopy_u8string){
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <LCD_enuDisplayString+0x6>
    224a:	0f 92       	push	r0
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	9b 83       	std	Y+3, r25	; 0x03
    2252:	8a 83       	std	Y+2, r24	; 0x02

	ES_ERROR local_enuErrorState = ES_OK;
    2254:	19 82       	std	Y+1, r1	; 0x01

	if(pcopy_u8string!=NULL)
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	9b 81       	ldd	r25, Y+3	; 0x03
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	d1 f0       	breq	.+52     	; 0x2292 <LCD_enuDisplayString+0x4e>
    225e:	13 c0       	rjmp	.+38     	; 0x2286 <LCD_enuDisplayString+0x42>
	{

		while((*pcopy_u8string)!='\0'){

		local_enuErrorState|=	DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8HIGH);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	62 e0       	ldi	r22, 0x02	; 2
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetpinval>
    226a:	98 2f       	mov	r25, r24
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	89 2b       	or	r24, r25
    2270:	89 83       	std	Y+1, r24	; 0x01

				LCD_inerSendData(*pcopy_u8string);
    2272:	ea 81       	ldd	r30, Y+2	; 0x02
    2274:	fb 81       	ldd	r31, Y+3	; 0x03
    2276:	80 81       	ld	r24, Z
    2278:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_inerSendData>
				pcopy_u8string++;
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	9b 83       	std	Y+3, r25	; 0x03
    2284:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuErrorState = ES_OK;

	if(pcopy_u8string!=NULL)
	{

		while((*pcopy_u8string)!='\0'){
    2286:	ea 81       	ldd	r30, Y+2	; 0x02
    2288:	fb 81       	ldd	r31, Y+3	; 0x03
    228a:	80 81       	ld	r24, Z
    228c:	88 23       	and	r24, r24
    228e:	41 f7       	brne	.-48     	; 0x2260 <LCD_enuDisplayString+0x1c>
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <LCD_enuDisplayString+0x52>
		}

	}
	else
	{
		local_enuErrorState = ES_NULL_POINTER;
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	89 83       	std	Y+1, r24	; 0x01
	}


		return local_enuErrorState;
    2296:	89 81       	ldd	r24, Y+1	; 0x01
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_enuDisplayNum>:

/////////////////////////////////////////////////////////////////////////////////////////


ES_ERROR LCD_enuDisplayNum(u32 copyu32_num)
{      ES_ERROR local_u8errorState=ES_OK;
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	61 97       	sbiw	r28, 0x11	; 17
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	6e 87       	std	Y+14, r22	; 0x0e
    22be:	7f 87       	std	Y+15, r23	; 0x0f
    22c0:	88 8b       	std	Y+16, r24	; 0x10
    22c2:	99 8b       	std	Y+17, r25	; 0x11
    22c4:	1b 82       	std	Y+3, r1	; 0x03
	 u8 local_u8AnumArr[10],local_u8NumIter=0,local_u8DisIter=0;
    22c6:	1a 82       	std	Y+2, r1	; 0x02
    22c8:	19 82       	std	Y+1, r1	; 0x01
		   if(copyu32_num == 0)
    22ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    22cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ce:	a8 89       	ldd	r26, Y+16	; 0x10
    22d0:	b9 89       	ldd	r27, Y+17	; 0x11
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	a1 05       	cpc	r26, r1
    22d6:	b1 05       	cpc	r27, r1
    22d8:	a9 f5       	brne	.+106    	; 0x2344 <LCD_enuDisplayNum+0xa0>
		   {
			   local_u8errorState|=  LCD_enuDisplayChar('0');
    22da:	80 e3       	ldi	r24, 0x30	; 48
    22dc:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_enuDisplayChar>
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	89 2b       	or	r24, r25
    22e4:	8b 83       	std	Y+3, r24	; 0x03
    22e6:	51 c0       	rjmp	.+162    	; 0x238a <LCD_enuDisplayNum+0xe6>
		   }
		   else
		   {
			   while(copyu32_num)
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	08 2f       	mov	r16, r24
    22ec:	10 e0       	ldi	r17, 0x00	; 0
    22ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f2:	a8 89       	ldd	r26, Y+16	; 0x10
    22f4:	b9 89       	ldd	r27, Y+17	; 0x11
    22f6:	2a e0       	ldi	r18, 0x0A	; 10
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__udivmodsi4>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	28 2f       	mov	r18, r24
    230c:	20 5d       	subi	r18, 0xD0	; 208
    230e:	ce 01       	movw	r24, r28
    2310:	04 96       	adiw	r24, 0x04	; 4
    2312:	fc 01       	movw	r30, r24
    2314:	e0 0f       	add	r30, r16
    2316:	f1 1f       	adc	r31, r17
    2318:	20 83       	st	Z, r18
				   copyu32_num/=10;
    231a:	8e 85       	ldd	r24, Y+14	; 0x0e
    231c:	9f 85       	ldd	r25, Y+15	; 0x0f
    231e:	a8 89       	ldd	r26, Y+16	; 0x10
    2320:	b9 89       	ldd	r27, Y+17	; 0x11
    2322:	2a e0       	ldi	r18, 0x0A	; 10
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__udivmodsi4>
    2332:	da 01       	movw	r26, r20
    2334:	c9 01       	movw	r24, r18
    2336:	8e 87       	std	Y+14, r24	; 0x0e
    2338:	9f 87       	std	Y+15, r25	; 0x0f
    233a:	a8 8b       	std	Y+16, r26	; 0x10
    233c:	b9 8b       	std	Y+17, r27	; 0x11
					local_u8NumIter++;
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	8f 5f       	subi	r24, 0xFF	; 255
    2342:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   local_u8errorState|=  LCD_enuDisplayChar('0');
		   }
		   else
		   {
			   while(copyu32_num)
    2344:	8e 85       	ldd	r24, Y+14	; 0x0e
    2346:	9f 85       	ldd	r25, Y+15	; 0x0f
    2348:	a8 89       	ldd	r26, Y+16	; 0x10
    234a:	b9 89       	ldd	r27, Y+17	; 0x11
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	a1 05       	cpc	r26, r1
    2350:	b1 05       	cpc	r27, r1
    2352:	51 f6       	brne	.-108    	; 0x22e8 <LCD_enuDisplayNum+0x44>
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
				   copyu32_num/=10;
					local_u8NumIter++;
			   }
			   for(local_u8DisIter=local_u8NumIter;local_u8DisIter>0;local_u8DisIter--)
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	15 c0       	rjmp	.+42     	; 0x2384 <LCD_enuDisplayNum+0xe0>
			   {
				   local_u8errorState|= LCD_enuDisplayChar(local_u8AnumArr[local_u8DisIter-1]);
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9c 01       	movw	r18, r24
    2362:	21 50       	subi	r18, 0x01	; 1
    2364:	30 40       	sbci	r19, 0x00	; 0
    2366:	ce 01       	movw	r24, r28
    2368:	04 96       	adiw	r24, 0x04	; 4
    236a:	fc 01       	movw	r30, r24
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
    2370:	80 81       	ld	r24, Z
    2372:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_enuDisplayChar>
    2376:	98 2f       	mov	r25, r24
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	89 2b       	or	r24, r25
    237c:	8b 83       	std	Y+3, r24	; 0x03
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
				   copyu32_num/=10;
					local_u8NumIter++;
			   }
			   for(local_u8DisIter=local_u8NumIter;local_u8DisIter>0;local_u8DisIter--)
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	81 50       	subi	r24, 0x01	; 1
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	88 23       	and	r24, r24
    2388:	41 f7       	brne	.-48     	; 0x235a <LCD_enuDisplayNum+0xb6>
			   {
				   local_u8errorState|= LCD_enuDisplayChar(local_u8AnumArr[local_u8DisIter-1]);
			   }
		   }
		   return  local_u8errorState;
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    238c:	61 96       	adiw	r28, 0x11	; 17
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	08 95       	ret

000023a2 <LCD_setCusor>:




 void LCD_setCusor(u8 copyu8_row,u8 copy_u8_column)
{      copy_u8_column--;
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <LCD_setCusor+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <LCD_setCusor+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	6a 83       	std	Y+2, r22	; 0x02
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	81 50       	subi	r24, 0x01	; 1
    23b6:	8a 83       	std	Y+2, r24	; 0x02

		switch(copyu8_row){
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3c 83       	std	Y+4, r19	; 0x04
    23c0:	2b 83       	std	Y+3, r18	; 0x03
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	91 05       	cpc	r25, r1
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <LCD_setCusor+0x36>
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	22 30       	cpi	r18, 0x02	; 2
    23d2:	31 05       	cpc	r19, r1
    23d4:	31 f0       	breq	.+12     	; 0x23e2 <LCD_setCusor+0x40>
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <LCD_setCusor+0x48>
		            case ROW1:  LCD_enuSendCommand((0x80 + copy_u8_column)); break;
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	80 58       	subi	r24, 0x80	; 128
    23dc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_enuSendCommand>
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <LCD_setCusor+0x48>
		            case ROW2:  LCD_enuSendCommand((0xc0 +copy_u8_column)); break;
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	80 54       	subi	r24, 0x40	; 64
    23e6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_enuSendCommand>
		            default:;
		        }


}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <LCD_enuClear>:

ES_ERROR LCD_enuClear()
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	0f 92       	push	r0
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
	ES_ERROR local_u8errorState=ES_OK;
    2402:	19 82       	std	Y+1, r1	; 0x01
	local_u8errorState|=LCD_enuSendCommand(0x01);
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_enuSendCommand>
    240a:	98 2f       	mov	r25, r24
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	89 2b       	or	r24, r25
    2410:	89 83       	std	Y+1, r24	; 0x01

return local_u8errorState;
    2412:	89 81       	ldd	r24, Y+1	; 0x01

}
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <LCD_enuDisplayCharPOS>:





ES_ERROR LCD_enuDisplayCharPOS(u8 Copy_u8Data,u8 copyu8_row,u8 copy_u8_column){
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <LCD_enuDisplayCharPOS+0x6>
    2422:	0f 92       	push	r0
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	6a 83       	std	Y+2, r22	; 0x02
    242c:	4b 83       	std	Y+3, r20	; 0x03

	LCD_setCusor(copyu8_row, copy_u8_column);
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	6b 81       	ldd	r22, Y+3	; 0x03
    2432:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_setCusor>
	LCD_enuDisplayChar(Copy_u8Data);
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_enuDisplayChar>
return ES_OK;
    243c:	80 e0       	ldi	r24, 0x00	; 0
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_enuDisplayStringPOS>:

ES_ERROR LCD_enuDisplayStringPOS(u8 *pcopy_u8string,u8 copyu8_row,u8 copy_u8_column){
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <LCD_enuDisplayStringPOS+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <LCD_enuDisplayStringPOS+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	6b 83       	std	Y+3, r22	; 0x03
    245c:	4c 83       	std	Y+4, r20	; 0x04
	LCD_setCusor(copyu8_row, copy_u8_column);
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	6c 81       	ldd	r22, Y+4	; 0x04
    2462:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_setCusor>
	LCD_enuDisplayString(pcopy_u8string);
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_enuDisplayString>
	return ES_OK;
    246e:	80 e0       	ldi	r24, 0x00	; 0
}
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <LCD_enuDisplayNumPOS>:

ES_ERROR LCD_enuDisplayNumPOS(u32 copyu32_num,u8 copyu8_row,u8 copy_u8_column){
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <LCD_enuDisplayNumPOS+0x6>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <LCD_enuDisplayNumPOS+0x8>
    2486:	00 d0       	rcall	.+0      	; 0x2488 <LCD_enuDisplayNumPOS+0xa>
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	69 83       	std	Y+1, r22	; 0x01
    248e:	7a 83       	std	Y+2, r23	; 0x02
    2490:	8b 83       	std	Y+3, r24	; 0x03
    2492:	9c 83       	std	Y+4, r25	; 0x04
    2494:	4d 83       	std	Y+5, r20	; 0x05
    2496:	2e 83       	std	Y+6, r18	; 0x06
	LCD_setCusor(copyu8_row, copy_u8_column);
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	6e 81       	ldd	r22, Y+6	; 0x06
    249c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_setCusor>
	LCD_enuDisplayNum(copyu32_num);
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	ab 81       	ldd	r26, Y+3	; 0x03
    24a6:	bc 81       	ldd	r27, Y+4	; 0x04
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_enuDisplayNum>
	return ES_OK;
    24b0:	80 e0       	ldi	r24, 0x00	; 0
}
    24b2:	26 96       	adiw	r28, 0x06	; 6
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <pre>:
#include <stdio.h>
#include <string.h>
#include "stack.h"
#include"string.h"
#include "stdTypes.h"
int pre(u8 i){
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <pre+0x6>
    24ca:	0f 92       	push	r0
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	89 83       	std	Y+1, r24	; 0x01
    if (i=='+'|| i=='-' )
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	8b 32       	cpi	r24, 0x2B	; 43
    24d6:	19 f0       	breq	.+6      	; 0x24de <pre+0x1a>
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	8d 32       	cpi	r24, 0x2D	; 45
    24dc:	29 f4       	brne	.+10     	; 0x24e8 <pre+0x24>
        return 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9b 83       	std	Y+3, r25	; 0x03
    24e4:	8a 83       	std	Y+2, r24	; 0x02
    24e6:	0d c0       	rjmp	.+26     	; 0x2502 <pre+0x3e>
    else if (i=='*'||i=='/')
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	8a 32       	cpi	r24, 0x2A	; 42
    24ec:	19 f0       	breq	.+6      	; 0x24f4 <pre+0x30>
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	8f 32       	cpi	r24, 0x2F	; 47
    24f2:	29 f4       	brne	.+10     	; 0x24fe <pre+0x3a>
        return 2;
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9b 83       	std	Y+3, r25	; 0x03
    24fa:	8a 83       	std	Y+2, r24	; 0x02
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <pre+0x3e>
    else
        return 0;
    24fe:	1b 82       	std	Y+3, r1	; 0x03
    2500:	1a 82       	std	Y+2, r1	; 0x02
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <isOperand>:

int isOperand (u8 i){
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <isOperand+0x6>
    2518:	0f 92       	push	r0
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	89 83       	std	Y+1, r24	; 0x01
    if(i=='+'||i=='-'||i=='*'||i=='/')
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	8b 32       	cpi	r24, 0x2B	; 43
    2524:	49 f0       	breq	.+18     	; 0x2538 <isOperand+0x26>
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	8d 32       	cpi	r24, 0x2D	; 45
    252a:	31 f0       	breq	.+12     	; 0x2538 <isOperand+0x26>
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	8a 32       	cpi	r24, 0x2A	; 42
    2530:	19 f0       	breq	.+6      	; 0x2538 <isOperand+0x26>
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	8f 32       	cpi	r24, 0x2F	; 47
    2536:	19 f4       	brne	.+6      	; 0x253e <isOperand+0x2c>
        return 0;
    2538:	1b 82       	std	Y+3, r1	; 0x03
    253a:	1a 82       	std	Y+2, r1	; 0x02
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <isOperand+0x34>
        else
        return 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9b 83       	std	Y+3, r25	; 0x03
    2544:	8a 83       	std	Y+2, r24	; 0x02
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	9b 81       	ldd	r25, Y+3	; 0x03

}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <intoPost>:

u8 * intoPost(u8 infix[],u8 size) {
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	6d 97       	sbiw	r28, 0x1d	; 29
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	9c 8f       	std	Y+28, r25	; 0x1c
    2570:	8b 8f       	std	Y+27, r24	; 0x1b
    2572:	6d 8f       	std	Y+29, r22	; 0x1d

    u8 *postfix = (u8 *) malloc(size*sizeof(u8)+9);
    2574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2576:	88 2f       	mov	r24, r24
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	09 96       	adiw	r24, 0x09	; 9
    257c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <malloc>
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03

    u8 i = 0, j = 0;
    2584:	1a 82       	std	Y+2, r1	; 0x02
    2586:	19 82       	std	Y+1, r1	; 0x01
    stack st;
    creatStack(&st);
    2588:	ce 01       	movw	r24, r28
    258a:	05 96       	adiw	r24, 0x05	; 5
    258c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <creatStack>
    2590:	82 c0       	rjmp	.+260    	; 0x2696 <intoPost+0x140>
 //   push('\0',&st);
    while (infix[i]!='\0') {
        if (isOperand(infix[i])){
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	fc 01       	movw	r30, r24
    259e:	e2 0f       	add	r30, r18
    25a0:	f3 1f       	adc	r31, r19
    25a2:	80 81       	ld	r24, Z
    25a4:	0e 94 89 12 	call	0x2512	; 0x2512 <isOperand>
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	09 f4       	brne	.+2      	; 0x25ae <intoPost+0x58>
    25ac:	46 c0       	rjmp	.+140    	; 0x263a <intoPost+0xe4>
    25ae:	18 c0       	rjmp	.+48     	; 0x25e0 <intoPost+0x8a>
        	while(isOperand(infix[i]))
            postfix[j++] = infix[i++];
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	dc 01       	movw	r26, r24
    25bc:	a2 0f       	add	r26, r18
    25be:	b3 1f       	adc	r27, r19
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ca:	fc 01       	movw	r30, r24
    25cc:	e2 0f       	add	r30, r18
    25ce:	f3 1f       	adc	r31, r19
    25d0:	80 81       	ld	r24, Z
    25d2:	8c 93       	st	X, r24
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	8f 5f       	subi	r24, 0xFF	; 255
    25de:	8a 83       	std	Y+2, r24	; 0x02
    stack st;
    creatStack(&st);
 //   push('\0',&st);
    while (infix[i]!='\0') {
        if (isOperand(infix[i])){
        	while(isOperand(infix[i]))
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ea:	fc 01       	movw	r30, r24
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	80 81       	ld	r24, Z
    25f2:	0e 94 89 12 	call	0x2512	; 0x2512 <isOperand>
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	d9 f6       	brne	.-74     	; 0x25b0 <intoPost+0x5a>
            postfix[j++] = infix[i++];
        	 postfix[j++] =' ';
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	fc 01       	movw	r30, r24
    2606:	e2 0f       	add	r30, r18
    2608:	f3 1f       	adc	r31, r19
    260a:	80 e2       	ldi	r24, 0x20	; 32
    260c:	80 83       	st	Z, r24
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	2d c0       	rjmp	.+90     	; 0x2670 <intoPost+0x11a>
        	 //i++;
        }
        else
        	while(!stackEmpty(&st)&&pre(infix[i]) <= pre(stackTop(&st)))
        		pop(&postfix[j++], &st);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	ac 01       	movw	r20, r24
    2622:	42 0f       	add	r20, r18
    2624:	53 1f       	adc	r21, r19
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	9e 01       	movw	r18, r28
    262e:	2b 5f       	subi	r18, 0xFB	; 251
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	ca 01       	movw	r24, r20
    2634:	b9 01       	movw	r22, r18
    2636:	0e 94 db 14 	call	0x29b6	; 0x29b6 <pop>
            postfix[j++] = infix[i++];
        	 postfix[j++] =' ';
        	 //i++;
        }
        else
        	while(!stackEmpty(&st)&&pre(infix[i]) <= pre(stackTop(&st)))
    263a:	ce 01       	movw	r24, r28
    263c:	05 96       	adiw	r24, 0x05	; 5
    263e:	0e 94 be 14 	call	0x297c	; 0x297c <stackEmpty>
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	a9 f4       	brne	.+42     	; 0x2670 <intoPost+0x11a>
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2650:	fc 01       	movw	r30, r24
    2652:	e2 0f       	add	r30, r18
    2654:	f3 1f       	adc	r31, r19
    2656:	80 81       	ld	r24, Z
    2658:	0e 94 62 12 	call	0x24c4	; 0x24c4 <pre>
    265c:	8c 01       	movw	r16, r24
    265e:	ce 01       	movw	r24, r28
    2660:	05 96       	adiw	r24, 0x05	; 5
    2662:	0e 94 02 15 	call	0x2a04	; 0x2a04 <stackTop>
    2666:	0e 94 62 12 	call	0x24c4	; 0x24c4 <pre>
    266a:	80 17       	cp	r24, r16
    266c:	91 07       	cpc	r25, r17
    266e:	9c f6       	brge	.-90     	; 0x2616 <intoPost+0xc0>
        		pop(&postfix[j++], &st);


        	 push(infix[i++], &st);
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	90 81       	ld	r25, Z
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	8f 5f       	subi	r24, 0xFF	; 255
    2686:	8a 83       	std	Y+2, r24	; 0x02
    2688:	9e 01       	movw	r18, r28
    268a:	2b 5f       	subi	r18, 0xFB	; 251
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	89 2f       	mov	r24, r25
    2690:	b9 01       	movw	r22, r18
    2692:	0e 94 80 14 	call	0x2900	; 0x2900 <push>

    u8 i = 0, j = 0;
    stack st;
    creatStack(&st);
 //   push('\0',&st);
    while (infix[i]!='\0') {
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a0:	fc 01       	movw	r30, r24
    26a2:	e2 0f       	add	r30, r18
    26a4:	f3 1f       	adc	r31, r19
    26a6:	80 81       	ld	r24, Z
    26a8:	88 23       	and	r24, r24
    26aa:	09 f0       	breq	.+2      	; 0x26ae <intoPost+0x158>
    26ac:	72 cf       	rjmp	.-284    	; 0x2592 <intoPost+0x3c>
    26ae:	12 c0       	rjmp	.+36     	; 0x26d4 <intoPost+0x17e>

    }


    while (!stackEmpty(&st)) {
        pop(&postfix[j++], &st);
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	ac 01       	movw	r20, r24
    26bc:	42 0f       	add	r20, r18
    26be:	53 1f       	adc	r21, r19
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	8f 5f       	subi	r24, 0xFF	; 255
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	9e 01       	movw	r18, r28
    26c8:	2b 5f       	subi	r18, 0xFB	; 251
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	ca 01       	movw	r24, r20
    26ce:	b9 01       	movw	r22, r18
    26d0:	0e 94 db 14 	call	0x29b6	; 0x29b6 <pop>
        	 push(infix[i++], &st);

    }


    while (!stackEmpty(&st)) {
    26d4:	ce 01       	movw	r24, r28
    26d6:	05 96       	adiw	r24, 0x05	; 5
    26d8:	0e 94 be 14 	call	0x297c	; 0x297c <stackEmpty>
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	41 f3       	breq	.-48     	; 0x26b0 <intoPost+0x15a>
        pop(&postfix[j++], &st);
    }
    postfix[j]='\0';
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	fc 01       	movw	r30, r24
    26ec:	e2 0f       	add	r30, r18
    26ee:	f3 1f       	adc	r31, r19
    26f0:	10 82       	st	Z, r1

    return postfix;
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    26f6:	6d 96       	adiw	r28, 0x1d	; 29
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	08 95       	ret

0000270c <evaluate>:



u8 evaluate(u8* postfix) {  //
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	a0 97       	sbiw	r28, 0x20	; 32
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	9e 8f       	std	Y+30, r25	; 0x1e
    2722:	8d 8f       	std	Y+29, r24	; 0x1d
    stack eval;
    creatStack(&eval);
    2724:	ce 01       	movw	r24, r28
    2726:	03 96       	adiw	r24, 0x03	; 3
    2728:	0e 94 70 14 	call	0x28e0	; 0x28e0 <creatStack>
    u8 sum=0;
    272c:	1a 82       	std	Y+2, r1	; 0x02
    u8 num=0;
    272e:	19 82       	std	Y+1, r1	; 0x01
    2730:	b9 c0       	rjmp	.+370    	; 0x28a4 <evaluate+0x198>
   // LCD_enuDisplayStringPOS("evtfix:",2,1);
    while(*postfix) {
        if (*postfix == '*' || *postfix == '%' || *postfix == '+' || *postfix == '-') {
    2732:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2734:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2736:	80 81       	ld	r24, Z
    2738:	8a 32       	cpi	r24, 0x2A	; 42
    273a:	81 f0       	breq	.+32     	; 0x275c <evaluate+0x50>
    273c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    273e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2740:	80 81       	ld	r24, Z
    2742:	85 32       	cpi	r24, 0x25	; 37
    2744:	59 f0       	breq	.+22     	; 0x275c <evaluate+0x50>
    2746:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2748:	fe 8d       	ldd	r31, Y+30	; 0x1e
    274a:	80 81       	ld	r24, Z
    274c:	8b 32       	cpi	r24, 0x2B	; 43
    274e:	31 f0       	breq	.+12     	; 0x275c <evaluate+0x50>
    2750:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2752:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2754:	80 81       	ld	r24, Z
    2756:	8d 32       	cpi	r24, 0x2D	; 45
    2758:	09 f0       	breq	.+2      	; 0x275c <evaluate+0x50>
    275a:	68 c0       	rjmp	.+208    	; 0x282c <evaluate+0x120>
            int op1, op2;
            pop(&op2, &eval);
    275c:	ce 01       	movw	r24, r28
    275e:	4b 96       	adiw	r24, 0x1b	; 27
    2760:	9e 01       	movw	r18, r28
    2762:	2d 5f       	subi	r18, 0xFD	; 253
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	b9 01       	movw	r22, r18
    2768:	0e 94 db 14 	call	0x29b6	; 0x29b6 <pop>
            pop(&op1, &eval);
    276c:	ce 01       	movw	r24, r28
    276e:	49 96       	adiw	r24, 0x19	; 25
    2770:	9e 01       	movw	r18, r28
    2772:	2d 5f       	subi	r18, 0xFD	; 253
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	b9 01       	movw	r22, r18
    2778:	0e 94 db 14 	call	0x29b6	; 0x29b6 <pop>

            switch (*postfix) {
    277c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    277e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2780:	80 81       	ld	r24, Z
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	38 a3       	std	Y+32, r19	; 0x20
    2788:	2f 8f       	std	Y+31, r18	; 0x1f
    278a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    278c:	58 a1       	ldd	r21, Y+32	; 0x20
    278e:	4a 32       	cpi	r20, 0x2A	; 42
    2790:	51 05       	cpc	r21, r1
    2792:	41 f1       	breq	.+80     	; 0x27e4 <evaluate+0xd8>
    2794:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2796:	98 a1       	ldd	r25, Y+32	; 0x20
    2798:	8b 32       	cpi	r24, 0x2B	; 43
    279a:	91 05       	cpc	r25, r1
    279c:	34 f4       	brge	.+12     	; 0x27aa <evaluate+0x9e>
    279e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    27a0:	38 a1       	ldd	r19, Y+32	; 0x20
    27a2:	25 32       	cpi	r18, 0x25	; 37
    27a4:	31 05       	cpc	r19, r1
    27a6:	61 f1       	breq	.+88     	; 0x2800 <evaluate+0xf4>
    27a8:	34 c0       	rjmp	.+104    	; 0x2812 <evaluate+0x106>
    27aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
    27ac:	58 a1       	ldd	r21, Y+32	; 0x20
    27ae:	4b 32       	cpi	r20, 0x2B	; 43
    27b0:	51 05       	cpc	r21, r1
    27b2:	31 f0       	breq	.+12     	; 0x27c0 <evaluate+0xb4>
    27b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b6:	98 a1       	ldd	r25, Y+32	; 0x20
    27b8:	8d 32       	cpi	r24, 0x2D	; 45
    27ba:	91 05       	cpc	r25, r1
    27bc:	49 f0       	breq	.+18     	; 0x27d0 <evaluate+0xc4>
    27be:	29 c0       	rjmp	.+82     	; 0x2812 <evaluate+0x106>
                case '+': sum = op1 + op2; break;
    27c0:	89 8d       	ldd	r24, Y+25	; 0x19
    27c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27c4:	28 2f       	mov	r18, r24
    27c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ca:	82 0f       	add	r24, r18
    27cc:	8a 83       	std	Y+2, r24	; 0x02
    27ce:	21 c0       	rjmp	.+66     	; 0x2812 <evaluate+0x106>
                case '-': sum = op1 - op2; break;
    27d0:	89 8d       	ldd	r24, Y+25	; 0x19
    27d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27d4:	28 2f       	mov	r18, r24
    27d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27da:	92 2f       	mov	r25, r18
    27dc:	98 1b       	sub	r25, r24
    27de:	89 2f       	mov	r24, r25
    27e0:	8a 83       	std	Y+2, r24	; 0x02
    27e2:	17 c0       	rjmp	.+46     	; 0x2812 <evaluate+0x106>
                case '*': sum = op1 * op2; break;
    27e4:	89 8d       	ldd	r24, Y+25	; 0x19
    27e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27e8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    27ea:	3c 8d       	ldd	r19, Y+28	; 0x1c
    27ec:	ac 01       	movw	r20, r24
    27ee:	42 9f       	mul	r20, r18
    27f0:	c0 01       	movw	r24, r0
    27f2:	43 9f       	mul	r20, r19
    27f4:	90 0d       	add	r25, r0
    27f6:	52 9f       	mul	r21, r18
    27f8:	90 0d       	add	r25, r0
    27fa:	11 24       	eor	r1, r1
    27fc:	8a 83       	std	Y+2, r24	; 0x02
    27fe:	09 c0       	rjmp	.+18     	; 0x2812 <evaluate+0x106>
                case '%': sum = op1 / op2; break;
    2800:	89 8d       	ldd	r24, Y+25	; 0x19
    2802:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2804:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2806:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2808:	b9 01       	movw	r22, r18
    280a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__divmodhi4>
    280e:	cb 01       	movw	r24, r22
    2810:	8a 83       	std	Y+2, r24	; 0x02
            }
            push(sum, &eval);
    2812:	9e 01       	movw	r18, r28
    2814:	2d 5f       	subi	r18, 0xFD	; 253
    2816:	3f 4f       	sbci	r19, 0xFF	; 255
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	b9 01       	movw	r22, r18
    281c:	0e 94 80 14 	call	0x2900	; 0x2900 <push>
            postfix++;
    2820:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2822:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	9e 8f       	std	Y+30, r25	; 0x1e
    2828:	8d 8f       	std	Y+29, r24	; 0x1d
    282a:	3c c0       	rjmp	.+120    	; 0x28a4 <evaluate+0x198>
        }
        else if (*postfix >= '0' && *postfix <= '9') {
    282c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    282e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2830:	80 81       	ld	r24, Z
    2832:	80 33       	cpi	r24, 0x30	; 48
    2834:	90 f1       	brcs	.+100    	; 0x289a <evaluate+0x18e>
    2836:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2838:	fe 8d       	ldd	r31, Y+30	; 0x1e
    283a:	80 81       	ld	r24, Z
    283c:	8a 33       	cpi	r24, 0x3A	; 58
    283e:	68 f5       	brcc	.+90     	; 0x289a <evaluate+0x18e>
            num = 0;
    2840:	19 82       	std	Y+1, r1	; 0x01
    2842:	19 c0       	rjmp	.+50     	; 0x2876 <evaluate+0x16a>
        	while(*postfix>='0'&&*postfix<='9'){

           num=num*10+*(postfix)-'0';
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	88 2f       	mov	r24, r24
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9c 01       	movw	r18, r24
    284c:	22 0f       	add	r18, r18
    284e:	33 1f       	adc	r19, r19
    2850:	c9 01       	movw	r24, r18
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	82 0f       	add	r24, r18
    285c:	93 1f       	adc	r25, r19
    285e:	98 2f       	mov	r25, r24
    2860:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2862:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2864:	80 81       	ld	r24, Z
    2866:	89 0f       	add	r24, r25
    2868:	80 53       	subi	r24, 0x30	; 48
    286a:	89 83       	std	Y+1, r24	; 0x01
           postfix++;
    286c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    286e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	9e 8f       	std	Y+30, r25	; 0x1e
    2874:	8d 8f       	std	Y+29, r24	; 0x1d
            push(sum, &eval);
            postfix++;
        }
        else if (*postfix >= '0' && *postfix <= '9') {
            num = 0;
        	while(*postfix>='0'&&*postfix<='9'){
    2876:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2878:	fe 8d       	ldd	r31, Y+30	; 0x1e
    287a:	80 81       	ld	r24, Z
    287c:	80 33       	cpi	r24, 0x30	; 48
    287e:	28 f0       	brcs	.+10     	; 0x288a <evaluate+0x17e>
    2880:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2882:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2884:	80 81       	ld	r24, Z
    2886:	8a 33       	cpi	r24, 0x3A	; 58
    2888:	e8 f2       	brcs	.-70     	; 0x2844 <evaluate+0x138>

           num=num*10+*(postfix)-'0';
           postfix++;
        }
            push(num, &eval);
    288a:	9e 01       	movw	r18, r28
    288c:	2d 5f       	subi	r18, 0xFD	; 253
    288e:	3f 4f       	sbci	r19, 0xFF	; 255
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	b9 01       	movw	r22, r18
    2894:	0e 94 80 14 	call	0x2900	; 0x2900 <push>
    2898:	05 c0       	rjmp	.+10     	; 0x28a4 <evaluate+0x198>
        }
        else //=' '
        postfix++;
    289a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    289c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	9e 8f       	std	Y+30, r25	; 0x1e
    28a2:	8d 8f       	std	Y+29, r24	; 0x1d
    stack eval;
    creatStack(&eval);
    u8 sum=0;
    u8 num=0;
   // LCD_enuDisplayStringPOS("evtfix:",2,1);
    while(*postfix) {
    28a4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    28a6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    28a8:	80 81       	ld	r24, Z
    28aa:	88 23       	and	r24, r24
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <evaluate+0x1a4>
    28ae:	41 cf       	rjmp	.-382    	; 0x2732 <evaluate+0x26>
            push(num, &eval);
        }
        else //=' '
        postfix++;
    }
    return stackTop(&eval);
    28b0:	ce 01       	movw	r24, r28
    28b2:	03 96       	adiw	r24, 0x03	; 3
    28b4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <stackTop>
}
    28b8:	a0 96       	adiw	r28, 0x20	; 32
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <main>:
#include"errorState.h"
#include"MCAL\DIO_int.h"
#include"HAL\KEYPAD_int.h"
#include"HAL\LCD_int.h"
#include"application\app.h"
int main(void){
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62

app();
    28d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <app>
	//LCD_enuDisplayString("MANAR");
	LCD_enuDisplayNumPOS(56,2,5);
	while(1);*/


	return 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <creatStack>:
//
#include <stdio.h>
#include "stdTypes.h"
#include "stack.h"
#include "string.h"
void creatStack(stack*sp){
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <creatStack+0x6>
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	89 83       	std	Y+1, r24	; 0x01
    sp->top=0;
    28ee:	e9 81       	ldd	r30, Y+1	; 0x01
    28f0:	fa 81       	ldd	r31, Y+2	; 0x02
    28f2:	15 8a       	std	Z+21, r1	; 0x15
    28f4:	14 8a       	std	Z+20, r1	; 0x14
}
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <push>:
void push(entry_type item, stack *sp){
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <push+0x6>
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	7b 83       	std	Y+3, r23	; 0x03
    2910:	6a 83       	std	Y+2, r22	; 0x02
    sp->entry[sp->top++]=item;
    2912:	ea 81       	ldd	r30, Y+2	; 0x02
    2914:	fb 81       	ldd	r31, Y+3	; 0x03
    2916:	24 89       	ldd	r18, Z+20	; 0x14
    2918:	35 89       	ldd	r19, Z+21	; 0x15
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	fc 01       	movw	r30, r24
    2920:	e2 0f       	add	r30, r18
    2922:	f3 1f       	adc	r31, r19
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	c9 01       	movw	r24, r18
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	ea 81       	ldd	r30, Y+2	; 0x02
    292e:	fb 81       	ldd	r31, Y+3	; 0x03
    2930:	95 8b       	std	Z+21, r25	; 0x15
    2932:	84 8b       	std	Z+20, r24	; 0x14
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <stackFull>:
int stackFull(stack* s){
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <stackFull+0x6>
    2946:	00 d0       	rcall	.+0      	; 0x2948 <stackFull+0x8>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    return s->top==MAX_SIZE;
    2950:	e9 81       	ldd	r30, Y+1	; 0x01
    2952:	fa 81       	ldd	r31, Y+2	; 0x02
    2954:	84 89       	ldd	r24, Z+20	; 0x14
    2956:	95 89       	ldd	r25, Z+21	; 0x15
    2958:	1c 82       	std	Y+4, r1	; 0x04
    295a:	1b 82       	std	Y+3, r1	; 0x03
    295c:	84 31       	cpi	r24, 0x14	; 20
    295e:	91 05       	cpc	r25, r1
    2960:	21 f4       	brne	.+8      	; 0x296a <stackFull+0x2a>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <stackEmpty>:

int stackEmpty(stack* sp){
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	00 d0       	rcall	.+0      	; 0x2982 <stackEmpty+0x6>
    2982:	00 d0       	rcall	.+0      	; 0x2984 <stackEmpty+0x8>
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
    //  return sp->top==0;
    return !sp->top;
    298c:	e9 81       	ldd	r30, Y+1	; 0x01
    298e:	fa 81       	ldd	r31, Y+2	; 0x02
    2990:	84 89       	ldd	r24, Z+20	; 0x14
    2992:	95 89       	ldd	r25, Z+21	; 0x15
    2994:	1c 82       	std	Y+4, r1	; 0x04
    2996:	1b 82       	std	Y+3, r1	; 0x03
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	21 f4       	brne	.+8      	; 0x29a4 <stackEmpty+0x28>
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <pop>:

void pop(entry_type *item, stack*sp){
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <pop+0x6>
    29bc:	00 d0       	rcall	.+0      	; 0x29be <pop+0x8>
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	9a 83       	std	Y+2, r25	; 0x02
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	7c 83       	std	Y+4, r23	; 0x04
    29c8:	6b 83       	std	Y+3, r22	; 0x03
    //sp->top--;
    *item=sp->entry[--sp->top];
    29ca:	eb 81       	ldd	r30, Y+3	; 0x03
    29cc:	fc 81       	ldd	r31, Y+4	; 0x04
    29ce:	84 89       	ldd	r24, Z+20	; 0x14
    29d0:	95 89       	ldd	r25, Z+21	; 0x15
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	eb 81       	ldd	r30, Y+3	; 0x03
    29d6:	fc 81       	ldd	r31, Y+4	; 0x04
    29d8:	95 8b       	std	Z+21, r25	; 0x15
    29da:	84 8b       	std	Z+20, r24	; 0x14
    29dc:	eb 81       	ldd	r30, Y+3	; 0x03
    29de:	fc 81       	ldd	r31, Y+4	; 0x04
    29e0:	24 89       	ldd	r18, Z+20	; 0x14
    29e2:	35 89       	ldd	r19, Z+21	; 0x15
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	fc 01       	movw	r30, r24
    29ea:	e2 0f       	add	r30, r18
    29ec:	f3 1f       	adc	r31, r19
    29ee:	80 81       	ld	r24, Z
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	80 83       	st	Z, r24
}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <stackTop>:

entry_type stackTop(stack*sp){
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <stackTop+0x6>
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
    return sp->entry[sp->top-1] ;
    2a12:	e9 81       	ldd	r30, Y+1	; 0x01
    2a14:	fa 81       	ldd	r31, Y+2	; 0x02
    2a16:	84 89       	ldd	r24, Z+20	; 0x14
    2a18:	95 89       	ldd	r25, Z+21	; 0x15
    2a1a:	9c 01       	movw	r18, r24
    2a1c:	21 50       	subi	r18, 0x01	; 1
    2a1e:	30 40       	sbci	r19, 0x00	; 0
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	fc 01       	movw	r30, r24
    2a26:	e2 0f       	add	r30, r18
    2a28:	f3 1f       	adc	r31, r19
    2a2a:	80 81       	ld	r24, Z
}
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <stackSize>:

int stackSize(stack*sp){
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <stackSize+0x6>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    return sp->top;
    2a44:	e9 81       	ldd	r30, Y+1	; 0x01
    2a46:	fa 81       	ldd	r31, Y+2	; 0x02
    2a48:	84 89       	ldd	r24, Z+20	; 0x14
    2a4a:	95 89       	ldd	r25, Z+21	; 0x15

}
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <clearStack>:

void clearStack(stack*sp){
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <clearStack+0x6>
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	89 83       	std	Y+1, r24	; 0x01
    sp->top=0;
    2a64:	e9 81       	ldd	r30, Y+1	; 0x01
    2a66:	fa 81       	ldd	r31, Y+2	; 0x02
    2a68:	15 8a       	std	Z+21, r1	; 0x15
    2a6a:	14 8a       	std	Z+20, r1	; 0x14
}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <display>:

void display(entry_type sItem){
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	0f 92       	push	r0
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	89 83       	std	Y+1, r24	; 0x01
    printf("%d\n",sItem);
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <display+0x14>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <display+0x16>
    2a8c:	ed b7       	in	r30, 0x3d	; 61
    2a8e:	fe b7       	in	r31, 0x3e	; 62
    2a90:	31 96       	adiw	r30, 0x01	; 1
    2a92:	88 e6       	ldi	r24, 0x68	; 104
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
    2a9a:	33 83       	std	Z+3, r19	; 0x03
    2a9c:	22 83       	std	Z+2, r18	; 0x02
    2a9e:	0e 94 41 17 	call	0x2e82	; 0x2e82 <printf>
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
}
    2aaa:	0f 90       	pop	r0
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <traverseStack>:

void traverseStack(stack*sp,void (*ptr)(entry_type)){
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <traverseStack+0x6>
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <traverseStack+0x8>
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <traverseStack+0xa>
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	9c 83       	std	Y+4, r25	; 0x04
    2ac2:	8b 83       	std	Y+3, r24	; 0x03
    2ac4:	7e 83       	std	Y+6, r23	; 0x06
    2ac6:	6d 83       	std	Y+5, r22	; 0x05
    for(int i=sp->top; i > 0; i--)
    2ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aca:	fc 81       	ldd	r31, Y+4	; 0x04
    2acc:	84 89       	ldd	r24, Z+20	; 0x14
    2ace:	95 89       	ldd	r25, Z+21	; 0x15
    2ad0:	9a 83       	std	Y+2, r25	; 0x02
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	13 c0       	rjmp	.+38     	; 0x2afc <traverseStack+0x4a>
        (*ptr)(sp->entry[i-1]);
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	9c 01       	movw	r18, r24
    2adc:	21 50       	subi	r18, 0x01	; 1
    2ade:	30 40       	sbci	r19, 0x00	; 0
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	e2 0f       	add	r30, r18
    2ae8:	f3 1f       	adc	r31, r19
    2aea:	80 81       	ld	r24, Z
    2aec:	ed 81       	ldd	r30, Y+5	; 0x05
    2aee:	fe 81       	ldd	r31, Y+6	; 0x06
    2af0:	09 95       	icall
void display(entry_type sItem){
    printf("%d\n",sItem);
}

void traverseStack(stack*sp,void (*ptr)(entry_type)){
    for(int i=sp->top; i > 0; i--)
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	9a 81       	ldd	r25, Y+2	; 0x02
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	18 16       	cp	r1, r24
    2b02:	19 06       	cpc	r1, r25
    2b04:	44 f3       	brlt	.-48     	; 0x2ad6 <traverseStack+0x24>
        (*ptr)(sp->entry[i-1]);
}
    2b06:	26 96       	adiw	r28, 0x06	; 6
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <stackTopUser>:


void stackTopUser(entry_type * item, stack *sp){
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <stackTopUser+0x6>
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <stackTopUser+0x8>
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	7c 83       	std	Y+4, r23	; 0x04
    2b2a:	6b 83       	std	Y+3, r22	; 0x03
    pop(item,sp);
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	2b 81       	ldd	r18, Y+3	; 0x03
    2b32:	3c 81       	ldd	r19, Y+4	; 0x04
    2b34:	b9 01       	movw	r22, r18
    2b36:	0e 94 db 14 	call	0x29b6	; 0x29b6 <pop>
    push(*item,sp);
    2b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3e:	80 81       	ld	r24, Z
    2b40:	2b 81       	ldd	r18, Y+3	; 0x03
    2b42:	3c 81       	ldd	r19, Y+4	; 0x04
    2b44:	b9 01       	movw	r22, r18
    2b46:	0e 94 80 14 	call	0x2900	; 0x2900 <push>
}
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <destroyStackUser>:
void destroyStackUser(stack*sp){
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <destroyStackUser+0x6>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01
    creatStack(sp);
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	0e 94 70 14 	call	0x28e0	; 0x28e0 <creatStack>
}
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <__divmodhi4>:
    2b78:	97 fb       	bst	r25, 7
    2b7a:	09 2e       	mov	r0, r25
    2b7c:	07 26       	eor	r0, r23
    2b7e:	0a d0       	rcall	.+20     	; 0x2b94 <__divmodhi4_neg1>
    2b80:	77 fd       	sbrc	r23, 7
    2b82:	04 d0       	rcall	.+8      	; 0x2b8c <__divmodhi4_neg2>
    2b84:	2e d0       	rcall	.+92     	; 0x2be2 <__udivmodhi4>
    2b86:	06 d0       	rcall	.+12     	; 0x2b94 <__divmodhi4_neg1>
    2b88:	00 20       	and	r0, r0
    2b8a:	1a f4       	brpl	.+6      	; 0x2b92 <__divmodhi4_exit>

00002b8c <__divmodhi4_neg2>:
    2b8c:	70 95       	com	r23
    2b8e:	61 95       	neg	r22
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255

00002b92 <__divmodhi4_exit>:
    2b92:	08 95       	ret

00002b94 <__divmodhi4_neg1>:
    2b94:	f6 f7       	brtc	.-4      	; 0x2b92 <__divmodhi4_exit>
    2b96:	90 95       	com	r25
    2b98:	81 95       	neg	r24
    2b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9c:	08 95       	ret

00002b9e <__udivmodsi4>:
    2b9e:	a1 e2       	ldi	r26, 0x21	; 33
    2ba0:	1a 2e       	mov	r1, r26
    2ba2:	aa 1b       	sub	r26, r26
    2ba4:	bb 1b       	sub	r27, r27
    2ba6:	fd 01       	movw	r30, r26
    2ba8:	0d c0       	rjmp	.+26     	; 0x2bc4 <__udivmodsi4_ep>

00002baa <__udivmodsi4_loop>:
    2baa:	aa 1f       	adc	r26, r26
    2bac:	bb 1f       	adc	r27, r27
    2bae:	ee 1f       	adc	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	a2 17       	cp	r26, r18
    2bb4:	b3 07       	cpc	r27, r19
    2bb6:	e4 07       	cpc	r30, r20
    2bb8:	f5 07       	cpc	r31, r21
    2bba:	20 f0       	brcs	.+8      	; 0x2bc4 <__udivmodsi4_ep>
    2bbc:	a2 1b       	sub	r26, r18
    2bbe:	b3 0b       	sbc	r27, r19
    2bc0:	e4 0b       	sbc	r30, r20
    2bc2:	f5 0b       	sbc	r31, r21

00002bc4 <__udivmodsi4_ep>:
    2bc4:	66 1f       	adc	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	88 1f       	adc	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	1a 94       	dec	r1
    2bce:	69 f7       	brne	.-38     	; 0x2baa <__udivmodsi4_loop>
    2bd0:	60 95       	com	r22
    2bd2:	70 95       	com	r23
    2bd4:	80 95       	com	r24
    2bd6:	90 95       	com	r25
    2bd8:	9b 01       	movw	r18, r22
    2bda:	ac 01       	movw	r20, r24
    2bdc:	bd 01       	movw	r22, r26
    2bde:	cf 01       	movw	r24, r30
    2be0:	08 95       	ret

00002be2 <__udivmodhi4>:
    2be2:	aa 1b       	sub	r26, r26
    2be4:	bb 1b       	sub	r27, r27
    2be6:	51 e1       	ldi	r21, 0x11	; 17
    2be8:	07 c0       	rjmp	.+14     	; 0x2bf8 <__udivmodhi4_ep>

00002bea <__udivmodhi4_loop>:
    2bea:	aa 1f       	adc	r26, r26
    2bec:	bb 1f       	adc	r27, r27
    2bee:	a6 17       	cp	r26, r22
    2bf0:	b7 07       	cpc	r27, r23
    2bf2:	10 f0       	brcs	.+4      	; 0x2bf8 <__udivmodhi4_ep>
    2bf4:	a6 1b       	sub	r26, r22
    2bf6:	b7 0b       	sbc	r27, r23

00002bf8 <__udivmodhi4_ep>:
    2bf8:	88 1f       	adc	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	5a 95       	dec	r21
    2bfe:	a9 f7       	brne	.-22     	; 0x2bea <__udivmodhi4_loop>
    2c00:	80 95       	com	r24
    2c02:	90 95       	com	r25
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	08 95       	ret

00002c0a <__prologue_saves__>:
    2c0a:	2f 92       	push	r2
    2c0c:	3f 92       	push	r3
    2c0e:	4f 92       	push	r4
    2c10:	5f 92       	push	r5
    2c12:	6f 92       	push	r6
    2c14:	7f 92       	push	r7
    2c16:	8f 92       	push	r8
    2c18:	9f 92       	push	r9
    2c1a:	af 92       	push	r10
    2c1c:	bf 92       	push	r11
    2c1e:	cf 92       	push	r12
    2c20:	df 92       	push	r13
    2c22:	ef 92       	push	r14
    2c24:	ff 92       	push	r15
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	ca 1b       	sub	r28, r26
    2c34:	db 0b       	sbc	r29, r27
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	09 94       	ijmp

00002c42 <__epilogue_restores__>:
    2c42:	2a 88       	ldd	r2, Y+18	; 0x12
    2c44:	39 88       	ldd	r3, Y+17	; 0x11
    2c46:	48 88       	ldd	r4, Y+16	; 0x10
    2c48:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c50:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c52:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c54:	b9 84       	ldd	r11, Y+9	; 0x09
    2c56:	c8 84       	ldd	r12, Y+8	; 0x08
    2c58:	df 80       	ldd	r13, Y+7	; 0x07
    2c5a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c5c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c5e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c60:	1b 81       	ldd	r17, Y+3	; 0x03
    2c62:	aa 81       	ldd	r26, Y+2	; 0x02
    2c64:	b9 81       	ldd	r27, Y+1	; 0x01
    2c66:	ce 0f       	add	r28, r30
    2c68:	d1 1d       	adc	r29, r1
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	ed 01       	movw	r28, r26
    2c76:	08 95       	ret

00002c78 <malloc>:
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	82 30       	cpi	r24, 0x02	; 2
    2c80:	91 05       	cpc	r25, r1
    2c82:	10 f4       	brcc	.+4      	; 0x2c88 <malloc+0x10>
    2c84:	62 e0       	ldi	r22, 0x02	; 2
    2c86:	70 e0       	ldi	r23, 0x00	; 0
    2c88:	a0 91 96 00 	lds	r26, 0x0096
    2c8c:	b0 91 97 00 	lds	r27, 0x0097
    2c90:	ed 01       	movw	r28, r26
    2c92:	e0 e0       	ldi	r30, 0x00	; 0
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	40 e0       	ldi	r20, 0x00	; 0
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	21 c0       	rjmp	.+66     	; 0x2cde <malloc+0x66>
    2c9c:	88 81       	ld	r24, Y
    2c9e:	99 81       	ldd	r25, Y+1	; 0x01
    2ca0:	86 17       	cp	r24, r22
    2ca2:	97 07       	cpc	r25, r23
    2ca4:	69 f4       	brne	.+26     	; 0x2cc0 <malloc+0x48>
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	30 97       	sbiw	r30, 0x00	; 0
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <malloc+0x3c>
    2cae:	93 83       	std	Z+3, r25	; 0x03
    2cb0:	82 83       	std	Z+2, r24	; 0x02
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <malloc+0x44>
    2cb4:	90 93 97 00 	sts	0x0097, r25
    2cb8:	80 93 96 00 	sts	0x0096, r24
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	34 c0       	rjmp	.+104    	; 0x2d28 <malloc+0xb0>
    2cc0:	68 17       	cp	r22, r24
    2cc2:	79 07       	cpc	r23, r25
    2cc4:	38 f4       	brcc	.+14     	; 0x2cd4 <malloc+0x5c>
    2cc6:	41 15       	cp	r20, r1
    2cc8:	51 05       	cpc	r21, r1
    2cca:	19 f0       	breq	.+6      	; 0x2cd2 <malloc+0x5a>
    2ccc:	84 17       	cp	r24, r20
    2cce:	95 07       	cpc	r25, r21
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <malloc+0x5c>
    2cd2:	ac 01       	movw	r20, r24
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cda:	9c 01       	movw	r18, r24
    2cdc:	e9 01       	movw	r28, r18
    2cde:	20 97       	sbiw	r28, 0x00	; 0
    2ce0:	e9 f6       	brne	.-70     	; 0x2c9c <malloc+0x24>
    2ce2:	41 15       	cp	r20, r1
    2ce4:	51 05       	cpc	r21, r1
    2ce6:	a9 f1       	breq	.+106    	; 0x2d52 <malloc+0xda>
    2ce8:	ca 01       	movw	r24, r20
    2cea:	86 1b       	sub	r24, r22
    2cec:	97 0b       	sbc	r25, r23
    2cee:	04 97       	sbiw	r24, 0x04	; 4
    2cf0:	08 f4       	brcc	.+2      	; 0x2cf4 <malloc+0x7c>
    2cf2:	ba 01       	movw	r22, r20
    2cf4:	e0 e0       	ldi	r30, 0x00	; 0
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	2a c0       	rjmp	.+84     	; 0x2d4e <malloc+0xd6>
    2cfa:	8d 91       	ld	r24, X+
    2cfc:	9c 91       	ld	r25, X
    2cfe:	11 97       	sbiw	r26, 0x01	; 1
    2d00:	84 17       	cp	r24, r20
    2d02:	95 07       	cpc	r25, r21
    2d04:	f9 f4       	brne	.+62     	; 0x2d44 <malloc+0xcc>
    2d06:	64 17       	cp	r22, r20
    2d08:	75 07       	cpc	r23, r21
    2d0a:	81 f4       	brne	.+32     	; 0x2d2c <malloc+0xb4>
    2d0c:	12 96       	adiw	r26, 0x02	; 2
    2d0e:	8d 91       	ld	r24, X+
    2d10:	9c 91       	ld	r25, X
    2d12:	13 97       	sbiw	r26, 0x03	; 3
    2d14:	30 97       	sbiw	r30, 0x00	; 0
    2d16:	19 f0       	breq	.+6      	; 0x2d1e <malloc+0xa6>
    2d18:	93 83       	std	Z+3, r25	; 0x03
    2d1a:	82 83       	std	Z+2, r24	; 0x02
    2d1c:	04 c0       	rjmp	.+8      	; 0x2d26 <malloc+0xae>
    2d1e:	90 93 97 00 	sts	0x0097, r25
    2d22:	80 93 96 00 	sts	0x0096, r24
    2d26:	fd 01       	movw	r30, r26
    2d28:	32 96       	adiw	r30, 0x02	; 2
    2d2a:	4f c0       	rjmp	.+158    	; 0x2dca <malloc+0x152>
    2d2c:	ca 01       	movw	r24, r20
    2d2e:	86 1b       	sub	r24, r22
    2d30:	97 0b       	sbc	r25, r23
    2d32:	fd 01       	movw	r30, r26
    2d34:	e8 0f       	add	r30, r24
    2d36:	f9 1f       	adc	r31, r25
    2d38:	61 93       	st	Z+, r22
    2d3a:	71 93       	st	Z+, r23
    2d3c:	02 97       	sbiw	r24, 0x02	; 2
    2d3e:	8d 93       	st	X+, r24
    2d40:	9c 93       	st	X, r25
    2d42:	43 c0       	rjmp	.+134    	; 0x2dca <malloc+0x152>
    2d44:	fd 01       	movw	r30, r26
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	9c 01       	movw	r18, r24
    2d4c:	d9 01       	movw	r26, r18
    2d4e:	10 97       	sbiw	r26, 0x00	; 0
    2d50:	a1 f6       	brne	.-88     	; 0x2cfa <malloc+0x82>
    2d52:	80 91 94 00 	lds	r24, 0x0094
    2d56:	90 91 95 00 	lds	r25, 0x0095
    2d5a:	89 2b       	or	r24, r25
    2d5c:	41 f4       	brne	.+16     	; 0x2d6e <malloc+0xf6>
    2d5e:	80 91 76 00 	lds	r24, 0x0076
    2d62:	90 91 77 00 	lds	r25, 0x0077
    2d66:	90 93 95 00 	sts	0x0095, r25
    2d6a:	80 93 94 00 	sts	0x0094, r24
    2d6e:	40 91 78 00 	lds	r20, 0x0078
    2d72:	50 91 79 00 	lds	r21, 0x0079
    2d76:	41 15       	cp	r20, r1
    2d78:	51 05       	cpc	r21, r1
    2d7a:	41 f4       	brne	.+16     	; 0x2d8c <malloc+0x114>
    2d7c:	4d b7       	in	r20, 0x3d	; 61
    2d7e:	5e b7       	in	r21, 0x3e	; 62
    2d80:	80 91 74 00 	lds	r24, 0x0074
    2d84:	90 91 75 00 	lds	r25, 0x0075
    2d88:	48 1b       	sub	r20, r24
    2d8a:	59 0b       	sbc	r21, r25
    2d8c:	20 91 94 00 	lds	r18, 0x0094
    2d90:	30 91 95 00 	lds	r19, 0x0095
    2d94:	24 17       	cp	r18, r20
    2d96:	35 07       	cpc	r19, r21
    2d98:	b0 f4       	brcc	.+44     	; 0x2dc6 <malloc+0x14e>
    2d9a:	ca 01       	movw	r24, r20
    2d9c:	82 1b       	sub	r24, r18
    2d9e:	93 0b       	sbc	r25, r19
    2da0:	86 17       	cp	r24, r22
    2da2:	97 07       	cpc	r25, r23
    2da4:	80 f0       	brcs	.+32     	; 0x2dc6 <malloc+0x14e>
    2da6:	ab 01       	movw	r20, r22
    2da8:	4e 5f       	subi	r20, 0xFE	; 254
    2daa:	5f 4f       	sbci	r21, 0xFF	; 255
    2dac:	84 17       	cp	r24, r20
    2dae:	95 07       	cpc	r25, r21
    2db0:	50 f0       	brcs	.+20     	; 0x2dc6 <malloc+0x14e>
    2db2:	42 0f       	add	r20, r18
    2db4:	53 1f       	adc	r21, r19
    2db6:	50 93 95 00 	sts	0x0095, r21
    2dba:	40 93 94 00 	sts	0x0094, r20
    2dbe:	f9 01       	movw	r30, r18
    2dc0:	61 93       	st	Z+, r22
    2dc2:	71 93       	st	Z+, r23
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <malloc+0x152>
    2dc6:	e0 e0       	ldi	r30, 0x00	; 0
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	cf 01       	movw	r24, r30
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	08 95       	ret

00002dd2 <free>:
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <free+0xa>
    2dda:	50 c0       	rjmp	.+160    	; 0x2e7c <free+0xaa>
    2ddc:	ec 01       	movw	r28, r24
    2dde:	22 97       	sbiw	r28, 0x02	; 2
    2de0:	1b 82       	std	Y+3, r1	; 0x03
    2de2:	1a 82       	std	Y+2, r1	; 0x02
    2de4:	a0 91 96 00 	lds	r26, 0x0096
    2de8:	b0 91 97 00 	lds	r27, 0x0097
    2dec:	10 97       	sbiw	r26, 0x00	; 0
    2dee:	09 f1       	breq	.+66     	; 0x2e32 <free+0x60>
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	ac 17       	cp	r26, r28
    2df6:	bd 07       	cpc	r27, r29
    2df8:	08 f1       	brcs	.+66     	; 0x2e3c <free+0x6a>
    2dfa:	bb 83       	std	Y+3, r27	; 0x03
    2dfc:	aa 83       	std	Y+2, r26	; 0x02
    2dfe:	fe 01       	movw	r30, r28
    2e00:	21 91       	ld	r18, Z+
    2e02:	31 91       	ld	r19, Z+
    2e04:	e2 0f       	add	r30, r18
    2e06:	f3 1f       	adc	r31, r19
    2e08:	ae 17       	cp	r26, r30
    2e0a:	bf 07       	cpc	r27, r31
    2e0c:	79 f4       	brne	.+30     	; 0x2e2c <free+0x5a>
    2e0e:	8d 91       	ld	r24, X+
    2e10:	9c 91       	ld	r25, X
    2e12:	11 97       	sbiw	r26, 0x01	; 1
    2e14:	28 0f       	add	r18, r24
    2e16:	39 1f       	adc	r19, r25
    2e18:	2e 5f       	subi	r18, 0xFE	; 254
    2e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1c:	39 83       	std	Y+1, r19	; 0x01
    2e1e:	28 83       	st	Y, r18
    2e20:	12 96       	adiw	r26, 0x02	; 2
    2e22:	8d 91       	ld	r24, X+
    2e24:	9c 91       	ld	r25, X
    2e26:	13 97       	sbiw	r26, 0x03	; 3
    2e28:	9b 83       	std	Y+3, r25	; 0x03
    2e2a:	8a 83       	std	Y+2, r24	; 0x02
    2e2c:	41 15       	cp	r20, r1
    2e2e:	51 05       	cpc	r21, r1
    2e30:	71 f4       	brne	.+28     	; 0x2e4e <free+0x7c>
    2e32:	d0 93 97 00 	sts	0x0097, r29
    2e36:	c0 93 96 00 	sts	0x0096, r28
    2e3a:	20 c0       	rjmp	.+64     	; 0x2e7c <free+0xaa>
    2e3c:	12 96       	adiw	r26, 0x02	; 2
    2e3e:	8d 91       	ld	r24, X+
    2e40:	9c 91       	ld	r25, X
    2e42:	13 97       	sbiw	r26, 0x03	; 3
    2e44:	ad 01       	movw	r20, r26
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	11 f0       	breq	.+4      	; 0x2e4e <free+0x7c>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	d3 cf       	rjmp	.-90     	; 0x2df4 <free+0x22>
    2e4e:	fa 01       	movw	r30, r20
    2e50:	d3 83       	std	Z+3, r29	; 0x03
    2e52:	c2 83       	std	Z+2, r28	; 0x02
    2e54:	21 91       	ld	r18, Z+
    2e56:	31 91       	ld	r19, Z+
    2e58:	e2 0f       	add	r30, r18
    2e5a:	f3 1f       	adc	r31, r19
    2e5c:	ce 17       	cp	r28, r30
    2e5e:	df 07       	cpc	r29, r31
    2e60:	69 f4       	brne	.+26     	; 0x2e7c <free+0xaa>
    2e62:	88 81       	ld	r24, Y
    2e64:	99 81       	ldd	r25, Y+1	; 0x01
    2e66:	28 0f       	add	r18, r24
    2e68:	39 1f       	adc	r19, r25
    2e6a:	2e 5f       	subi	r18, 0xFE	; 254
    2e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6e:	fa 01       	movw	r30, r20
    2e70:	31 83       	std	Z+1, r19	; 0x01
    2e72:	20 83       	st	Z, r18
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	9b 81       	ldd	r25, Y+3	; 0x03
    2e78:	93 83       	std	Z+3, r25	; 0x03
    2e7a:	82 83       	std	Z+2, r24	; 0x02
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <printf>:
    2e82:	a0 e0       	ldi	r26, 0x00	; 0
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e7 e4       	ldi	r30, 0x47	; 71
    2e88:	f7 e1       	ldi	r31, 0x17	; 23
    2e8a:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x20>
    2e8e:	fe 01       	movw	r30, r28
    2e90:	35 96       	adiw	r30, 0x05	; 5
    2e92:	61 91       	ld	r22, Z+
    2e94:	71 91       	ld	r23, Z+
    2e96:	80 91 9a 00 	lds	r24, 0x009A
    2e9a:	90 91 9b 00 	lds	r25, 0x009B
    2e9e:	af 01       	movw	r20, r30
    2ea0:	0e 94 56 17 	call	0x2eac	; 0x2eac <vfprintf>
    2ea4:	20 96       	adiw	r28, 0x00	; 0
    2ea6:	e2 e0       	ldi	r30, 0x02	; 2
    2ea8:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x20>

00002eac <vfprintf>:
    2eac:	ab e0       	ldi	r26, 0x0B	; 11
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	ec e5       	ldi	r30, 0x5C	; 92
    2eb2:	f7 e1       	ldi	r31, 0x17	; 23
    2eb4:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__>
    2eb8:	3c 01       	movw	r6, r24
    2eba:	2b 01       	movw	r4, r22
    2ebc:	5a 01       	movw	r10, r20
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	17 82       	std	Z+7, r1	; 0x07
    2ec2:	16 82       	std	Z+6, r1	; 0x06
    2ec4:	83 81       	ldd	r24, Z+3	; 0x03
    2ec6:	81 fd       	sbrc	r24, 1
    2ec8:	03 c0       	rjmp	.+6      	; 0x2ed0 <vfprintf+0x24>
    2eca:	6f ef       	ldi	r22, 0xFF	; 255
    2ecc:	7f ef       	ldi	r23, 0xFF	; 255
    2ece:	c6 c1       	rjmp	.+908    	; 0x325c <vfprintf+0x3b0>
    2ed0:	9a e0       	ldi	r25, 0x0A	; 10
    2ed2:	89 2e       	mov	r8, r25
    2ed4:	1e 01       	movw	r2, r28
    2ed6:	08 94       	sec
    2ed8:	21 1c       	adc	r2, r1
    2eda:	31 1c       	adc	r3, r1
    2edc:	f3 01       	movw	r30, r6
    2ede:	23 81       	ldd	r18, Z+3	; 0x03
    2ee0:	f2 01       	movw	r30, r4
    2ee2:	23 fd       	sbrc	r18, 3
    2ee4:	85 91       	lpm	r24, Z+
    2ee6:	23 ff       	sbrs	r18, 3
    2ee8:	81 91       	ld	r24, Z+
    2eea:	2f 01       	movw	r4, r30
    2eec:	88 23       	and	r24, r24
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <vfprintf+0x46>
    2ef0:	b2 c1       	rjmp	.+868    	; 0x3256 <vfprintf+0x3aa>
    2ef2:	85 32       	cpi	r24, 0x25	; 37
    2ef4:	39 f4       	brne	.+14     	; 0x2f04 <vfprintf+0x58>
    2ef6:	23 fd       	sbrc	r18, 3
    2ef8:	85 91       	lpm	r24, Z+
    2efa:	23 ff       	sbrs	r18, 3
    2efc:	81 91       	ld	r24, Z+
    2efe:	2f 01       	movw	r4, r30
    2f00:	85 32       	cpi	r24, 0x25	; 37
    2f02:	29 f4       	brne	.+10     	; 0x2f0e <vfprintf+0x62>
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	b3 01       	movw	r22, r6
    2f08:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    2f0c:	e7 cf       	rjmp	.-50     	; 0x2edc <vfprintf+0x30>
    2f0e:	98 2f       	mov	r25, r24
    2f10:	ff 24       	eor	r15, r15
    2f12:	ee 24       	eor	r14, r14
    2f14:	99 24       	eor	r9, r9
    2f16:	ff e1       	ldi	r31, 0x1F	; 31
    2f18:	ff 15       	cp	r31, r15
    2f1a:	d0 f0       	brcs	.+52     	; 0x2f50 <vfprintf+0xa4>
    2f1c:	9b 32       	cpi	r25, 0x2B	; 43
    2f1e:	69 f0       	breq	.+26     	; 0x2f3a <vfprintf+0x8e>
    2f20:	9c 32       	cpi	r25, 0x2C	; 44
    2f22:	28 f4       	brcc	.+10     	; 0x2f2e <vfprintf+0x82>
    2f24:	90 32       	cpi	r25, 0x20	; 32
    2f26:	59 f0       	breq	.+22     	; 0x2f3e <vfprintf+0x92>
    2f28:	93 32       	cpi	r25, 0x23	; 35
    2f2a:	91 f4       	brne	.+36     	; 0x2f50 <vfprintf+0xa4>
    2f2c:	0e c0       	rjmp	.+28     	; 0x2f4a <vfprintf+0x9e>
    2f2e:	9d 32       	cpi	r25, 0x2D	; 45
    2f30:	49 f0       	breq	.+18     	; 0x2f44 <vfprintf+0x98>
    2f32:	90 33       	cpi	r25, 0x30	; 48
    2f34:	69 f4       	brne	.+26     	; 0x2f50 <vfprintf+0xa4>
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	24 c0       	rjmp	.+72     	; 0x2f82 <vfprintf+0xd6>
    2f3a:	52 e0       	ldi	r21, 0x02	; 2
    2f3c:	f5 2a       	or	r15, r21
    2f3e:	84 e0       	ldi	r24, 0x04	; 4
    2f40:	f8 2a       	or	r15, r24
    2f42:	28 c0       	rjmp	.+80     	; 0x2f94 <vfprintf+0xe8>
    2f44:	98 e0       	ldi	r25, 0x08	; 8
    2f46:	f9 2a       	or	r15, r25
    2f48:	25 c0       	rjmp	.+74     	; 0x2f94 <vfprintf+0xe8>
    2f4a:	e0 e1       	ldi	r30, 0x10	; 16
    2f4c:	fe 2a       	or	r15, r30
    2f4e:	22 c0       	rjmp	.+68     	; 0x2f94 <vfprintf+0xe8>
    2f50:	f7 fc       	sbrc	r15, 7
    2f52:	29 c0       	rjmp	.+82     	; 0x2fa6 <vfprintf+0xfa>
    2f54:	89 2f       	mov	r24, r25
    2f56:	80 53       	subi	r24, 0x30	; 48
    2f58:	8a 30       	cpi	r24, 0x0A	; 10
    2f5a:	70 f4       	brcc	.+28     	; 0x2f78 <vfprintf+0xcc>
    2f5c:	f6 fe       	sbrs	r15, 6
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <vfprintf+0xbe>
    2f60:	98 9c       	mul	r9, r8
    2f62:	90 2c       	mov	r9, r0
    2f64:	11 24       	eor	r1, r1
    2f66:	98 0e       	add	r9, r24
    2f68:	15 c0       	rjmp	.+42     	; 0x2f94 <vfprintf+0xe8>
    2f6a:	e8 9c       	mul	r14, r8
    2f6c:	e0 2c       	mov	r14, r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	e8 0e       	add	r14, r24
    2f72:	f0 e2       	ldi	r31, 0x20	; 32
    2f74:	ff 2a       	or	r15, r31
    2f76:	0e c0       	rjmp	.+28     	; 0x2f94 <vfprintf+0xe8>
    2f78:	9e 32       	cpi	r25, 0x2E	; 46
    2f7a:	29 f4       	brne	.+10     	; 0x2f86 <vfprintf+0xda>
    2f7c:	f6 fc       	sbrc	r15, 6
    2f7e:	6b c1       	rjmp	.+726    	; 0x3256 <vfprintf+0x3aa>
    2f80:	40 e4       	ldi	r20, 0x40	; 64
    2f82:	f4 2a       	or	r15, r20
    2f84:	07 c0       	rjmp	.+14     	; 0x2f94 <vfprintf+0xe8>
    2f86:	9c 36       	cpi	r25, 0x6C	; 108
    2f88:	19 f4       	brne	.+6      	; 0x2f90 <vfprintf+0xe4>
    2f8a:	50 e8       	ldi	r21, 0x80	; 128
    2f8c:	f5 2a       	or	r15, r21
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <vfprintf+0xe8>
    2f90:	98 36       	cpi	r25, 0x68	; 104
    2f92:	49 f4       	brne	.+18     	; 0x2fa6 <vfprintf+0xfa>
    2f94:	f2 01       	movw	r30, r4
    2f96:	23 fd       	sbrc	r18, 3
    2f98:	95 91       	lpm	r25, Z+
    2f9a:	23 ff       	sbrs	r18, 3
    2f9c:	91 91       	ld	r25, Z+
    2f9e:	2f 01       	movw	r4, r30
    2fa0:	99 23       	and	r25, r25
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <vfprintf+0xfa>
    2fa4:	b8 cf       	rjmp	.-144    	; 0x2f16 <vfprintf+0x6a>
    2fa6:	89 2f       	mov	r24, r25
    2fa8:	85 54       	subi	r24, 0x45	; 69
    2faa:	83 30       	cpi	r24, 0x03	; 3
    2fac:	18 f0       	brcs	.+6      	; 0x2fb4 <vfprintf+0x108>
    2fae:	80 52       	subi	r24, 0x20	; 32
    2fb0:	83 30       	cpi	r24, 0x03	; 3
    2fb2:	38 f4       	brcc	.+14     	; 0x2fc2 <vfprintf+0x116>
    2fb4:	44 e0       	ldi	r20, 0x04	; 4
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	a4 0e       	add	r10, r20
    2fba:	b5 1e       	adc	r11, r21
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	59 83       	std	Y+1, r21	; 0x01
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <vfprintf+0x134>
    2fc2:	93 36       	cpi	r25, 0x63	; 99
    2fc4:	31 f0       	breq	.+12     	; 0x2fd2 <vfprintf+0x126>
    2fc6:	93 37       	cpi	r25, 0x73	; 115
    2fc8:	79 f0       	breq	.+30     	; 0x2fe8 <vfprintf+0x13c>
    2fca:	93 35       	cpi	r25, 0x53	; 83
    2fcc:	09 f0       	breq	.+2      	; 0x2fd0 <vfprintf+0x124>
    2fce:	56 c0       	rjmp	.+172    	; 0x307c <vfprintf+0x1d0>
    2fd0:	20 c0       	rjmp	.+64     	; 0x3012 <vfprintf+0x166>
    2fd2:	f5 01       	movw	r30, r10
    2fd4:	80 81       	ld	r24, Z
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	42 e0       	ldi	r20, 0x02	; 2
    2fda:	50 e0       	ldi	r21, 0x00	; 0
    2fdc:	a4 0e       	add	r10, r20
    2fde:	b5 1e       	adc	r11, r21
    2fe0:	61 01       	movw	r12, r2
    2fe2:	01 e0       	ldi	r16, 0x01	; 1
    2fe4:	10 e0       	ldi	r17, 0x00	; 0
    2fe6:	12 c0       	rjmp	.+36     	; 0x300c <vfprintf+0x160>
    2fe8:	f5 01       	movw	r30, r10
    2fea:	c0 80       	ld	r12, Z
    2fec:	d1 80       	ldd	r13, Z+1	; 0x01
    2fee:	f6 fc       	sbrc	r15, 6
    2ff0:	03 c0       	rjmp	.+6      	; 0x2ff8 <vfprintf+0x14c>
    2ff2:	6f ef       	ldi	r22, 0xFF	; 255
    2ff4:	7f ef       	ldi	r23, 0xFF	; 255
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <vfprintf+0x150>
    2ff8:	69 2d       	mov	r22, r9
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	42 e0       	ldi	r20, 0x02	; 2
    2ffe:	50 e0       	ldi	r21, 0x00	; 0
    3000:	a4 0e       	add	r10, r20
    3002:	b5 1e       	adc	r11, r21
    3004:	c6 01       	movw	r24, r12
    3006:	0e 94 3e 19 	call	0x327c	; 0x327c <strnlen>
    300a:	8c 01       	movw	r16, r24
    300c:	5f e7       	ldi	r21, 0x7F	; 127
    300e:	f5 22       	and	r15, r21
    3010:	14 c0       	rjmp	.+40     	; 0x303a <vfprintf+0x18e>
    3012:	f5 01       	movw	r30, r10
    3014:	c0 80       	ld	r12, Z
    3016:	d1 80       	ldd	r13, Z+1	; 0x01
    3018:	f6 fc       	sbrc	r15, 6
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <vfprintf+0x176>
    301c:	6f ef       	ldi	r22, 0xFF	; 255
    301e:	7f ef       	ldi	r23, 0xFF	; 255
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <vfprintf+0x17a>
    3022:	69 2d       	mov	r22, r9
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	42 e0       	ldi	r20, 0x02	; 2
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	a4 0e       	add	r10, r20
    302c:	b5 1e       	adc	r11, r21
    302e:	c6 01       	movw	r24, r12
    3030:	0e 94 33 19 	call	0x3266	; 0x3266 <strnlen_P>
    3034:	8c 01       	movw	r16, r24
    3036:	50 e8       	ldi	r21, 0x80	; 128
    3038:	f5 2a       	or	r15, r21
    303a:	f3 fe       	sbrs	r15, 3
    303c:	07 c0       	rjmp	.+14     	; 0x304c <vfprintf+0x1a0>
    303e:	1a c0       	rjmp	.+52     	; 0x3074 <vfprintf+0x1c8>
    3040:	80 e2       	ldi	r24, 0x20	; 32
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	b3 01       	movw	r22, r6
    3046:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    304a:	ea 94       	dec	r14
    304c:	8e 2d       	mov	r24, r14
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	08 17       	cp	r16, r24
    3052:	19 07       	cpc	r17, r25
    3054:	a8 f3       	brcs	.-22     	; 0x3040 <vfprintf+0x194>
    3056:	0e c0       	rjmp	.+28     	; 0x3074 <vfprintf+0x1c8>
    3058:	f6 01       	movw	r30, r12
    305a:	f7 fc       	sbrc	r15, 7
    305c:	85 91       	lpm	r24, Z+
    305e:	f7 fe       	sbrs	r15, 7
    3060:	81 91       	ld	r24, Z+
    3062:	6f 01       	movw	r12, r30
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	b3 01       	movw	r22, r6
    3068:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    306c:	e1 10       	cpse	r14, r1
    306e:	ea 94       	dec	r14
    3070:	01 50       	subi	r16, 0x01	; 1
    3072:	10 40       	sbci	r17, 0x00	; 0
    3074:	01 15       	cp	r16, r1
    3076:	11 05       	cpc	r17, r1
    3078:	79 f7       	brne	.-34     	; 0x3058 <vfprintf+0x1ac>
    307a:	ea c0       	rjmp	.+468    	; 0x3250 <vfprintf+0x3a4>
    307c:	94 36       	cpi	r25, 0x64	; 100
    307e:	11 f0       	breq	.+4      	; 0x3084 <vfprintf+0x1d8>
    3080:	99 36       	cpi	r25, 0x69	; 105
    3082:	69 f5       	brne	.+90     	; 0x30de <vfprintf+0x232>
    3084:	f7 fe       	sbrs	r15, 7
    3086:	08 c0       	rjmp	.+16     	; 0x3098 <vfprintf+0x1ec>
    3088:	f5 01       	movw	r30, r10
    308a:	20 81       	ld	r18, Z
    308c:	31 81       	ldd	r19, Z+1	; 0x01
    308e:	42 81       	ldd	r20, Z+2	; 0x02
    3090:	53 81       	ldd	r21, Z+3	; 0x03
    3092:	84 e0       	ldi	r24, 0x04	; 4
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0a c0       	rjmp	.+20     	; 0x30ac <vfprintf+0x200>
    3098:	f5 01       	movw	r30, r10
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	9c 01       	movw	r18, r24
    30a0:	44 27       	eor	r20, r20
    30a2:	37 fd       	sbrc	r19, 7
    30a4:	40 95       	com	r20
    30a6:	54 2f       	mov	r21, r20
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a8 0e       	add	r10, r24
    30ae:	b9 1e       	adc	r11, r25
    30b0:	9f e6       	ldi	r25, 0x6F	; 111
    30b2:	f9 22       	and	r15, r25
    30b4:	57 ff       	sbrs	r21, 7
    30b6:	09 c0       	rjmp	.+18     	; 0x30ca <vfprintf+0x21e>
    30b8:	50 95       	com	r21
    30ba:	40 95       	com	r20
    30bc:	30 95       	com	r19
    30be:	21 95       	neg	r18
    30c0:	3f 4f       	sbci	r19, 0xFF	; 255
    30c2:	4f 4f       	sbci	r20, 0xFF	; 255
    30c4:	5f 4f       	sbci	r21, 0xFF	; 255
    30c6:	e0 e8       	ldi	r30, 0x80	; 128
    30c8:	fe 2a       	or	r15, r30
    30ca:	ca 01       	movw	r24, r20
    30cc:	b9 01       	movw	r22, r18
    30ce:	a1 01       	movw	r20, r2
    30d0:	2a e0       	ldi	r18, 0x0A	; 10
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	0e 94 75 19 	call	0x32ea	; 0x32ea <__ultoa_invert>
    30d8:	d8 2e       	mov	r13, r24
    30da:	d2 18       	sub	r13, r2
    30dc:	40 c0       	rjmp	.+128    	; 0x315e <vfprintf+0x2b2>
    30de:	95 37       	cpi	r25, 0x75	; 117
    30e0:	29 f4       	brne	.+10     	; 0x30ec <vfprintf+0x240>
    30e2:	1f 2d       	mov	r17, r15
    30e4:	1f 7e       	andi	r17, 0xEF	; 239
    30e6:	2a e0       	ldi	r18, 0x0A	; 10
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	1d c0       	rjmp	.+58     	; 0x3126 <vfprintf+0x27a>
    30ec:	1f 2d       	mov	r17, r15
    30ee:	19 7f       	andi	r17, 0xF9	; 249
    30f0:	9f 36       	cpi	r25, 0x6F	; 111
    30f2:	61 f0       	breq	.+24     	; 0x310c <vfprintf+0x260>
    30f4:	90 37       	cpi	r25, 0x70	; 112
    30f6:	20 f4       	brcc	.+8      	; 0x3100 <vfprintf+0x254>
    30f8:	98 35       	cpi	r25, 0x58	; 88
    30fa:	09 f0       	breq	.+2      	; 0x30fe <vfprintf+0x252>
    30fc:	ac c0       	rjmp	.+344    	; 0x3256 <vfprintf+0x3aa>
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <vfprintf+0x272>
    3100:	90 37       	cpi	r25, 0x70	; 112
    3102:	39 f0       	breq	.+14     	; 0x3112 <vfprintf+0x266>
    3104:	98 37       	cpi	r25, 0x78	; 120
    3106:	09 f0       	breq	.+2      	; 0x310a <vfprintf+0x25e>
    3108:	a6 c0       	rjmp	.+332    	; 0x3256 <vfprintf+0x3aa>
    310a:	04 c0       	rjmp	.+8      	; 0x3114 <vfprintf+0x268>
    310c:	28 e0       	ldi	r18, 0x08	; 8
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	0a c0       	rjmp	.+20     	; 0x3126 <vfprintf+0x27a>
    3112:	10 61       	ori	r17, 0x10	; 16
    3114:	14 fd       	sbrc	r17, 4
    3116:	14 60       	ori	r17, 0x04	; 4
    3118:	20 e1       	ldi	r18, 0x10	; 16
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	04 c0       	rjmp	.+8      	; 0x3126 <vfprintf+0x27a>
    311e:	14 fd       	sbrc	r17, 4
    3120:	16 60       	ori	r17, 0x06	; 6
    3122:	20 e1       	ldi	r18, 0x10	; 16
    3124:	32 e0       	ldi	r19, 0x02	; 2
    3126:	17 ff       	sbrs	r17, 7
    3128:	08 c0       	rjmp	.+16     	; 0x313a <vfprintf+0x28e>
    312a:	f5 01       	movw	r30, r10
    312c:	60 81       	ld	r22, Z
    312e:	71 81       	ldd	r23, Z+1	; 0x01
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	44 e0       	ldi	r20, 0x04	; 4
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	08 c0       	rjmp	.+16     	; 0x314a <vfprintf+0x29e>
    313a:	f5 01       	movw	r30, r10
    313c:	80 81       	ld	r24, Z
    313e:	91 81       	ldd	r25, Z+1	; 0x01
    3140:	bc 01       	movw	r22, r24
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	42 e0       	ldi	r20, 0x02	; 2
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	a4 0e       	add	r10, r20
    314c:	b5 1e       	adc	r11, r21
    314e:	a1 01       	movw	r20, r2
    3150:	0e 94 75 19 	call	0x32ea	; 0x32ea <__ultoa_invert>
    3154:	d8 2e       	mov	r13, r24
    3156:	d2 18       	sub	r13, r2
    3158:	8f e7       	ldi	r24, 0x7F	; 127
    315a:	f8 2e       	mov	r15, r24
    315c:	f1 22       	and	r15, r17
    315e:	f6 fe       	sbrs	r15, 6
    3160:	0b c0       	rjmp	.+22     	; 0x3178 <vfprintf+0x2cc>
    3162:	5e ef       	ldi	r21, 0xFE	; 254
    3164:	f5 22       	and	r15, r21
    3166:	d9 14       	cp	r13, r9
    3168:	38 f4       	brcc	.+14     	; 0x3178 <vfprintf+0x2cc>
    316a:	f4 fe       	sbrs	r15, 4
    316c:	07 c0       	rjmp	.+14     	; 0x317c <vfprintf+0x2d0>
    316e:	f2 fc       	sbrc	r15, 2
    3170:	05 c0       	rjmp	.+10     	; 0x317c <vfprintf+0x2d0>
    3172:	8f ee       	ldi	r24, 0xEF	; 239
    3174:	f8 22       	and	r15, r24
    3176:	02 c0       	rjmp	.+4      	; 0x317c <vfprintf+0x2d0>
    3178:	1d 2d       	mov	r17, r13
    317a:	01 c0       	rjmp	.+2      	; 0x317e <vfprintf+0x2d2>
    317c:	19 2d       	mov	r17, r9
    317e:	f4 fe       	sbrs	r15, 4
    3180:	0d c0       	rjmp	.+26     	; 0x319c <vfprintf+0x2f0>
    3182:	fe 01       	movw	r30, r28
    3184:	ed 0d       	add	r30, r13
    3186:	f1 1d       	adc	r31, r1
    3188:	80 81       	ld	r24, Z
    318a:	80 33       	cpi	r24, 0x30	; 48
    318c:	19 f4       	brne	.+6      	; 0x3194 <vfprintf+0x2e8>
    318e:	99 ee       	ldi	r25, 0xE9	; 233
    3190:	f9 22       	and	r15, r25
    3192:	08 c0       	rjmp	.+16     	; 0x31a4 <vfprintf+0x2f8>
    3194:	1f 5f       	subi	r17, 0xFF	; 255
    3196:	f2 fe       	sbrs	r15, 2
    3198:	05 c0       	rjmp	.+10     	; 0x31a4 <vfprintf+0x2f8>
    319a:	03 c0       	rjmp	.+6      	; 0x31a2 <vfprintf+0x2f6>
    319c:	8f 2d       	mov	r24, r15
    319e:	86 78       	andi	r24, 0x86	; 134
    31a0:	09 f0       	breq	.+2      	; 0x31a4 <vfprintf+0x2f8>
    31a2:	1f 5f       	subi	r17, 0xFF	; 255
    31a4:	0f 2d       	mov	r16, r15
    31a6:	f3 fc       	sbrc	r15, 3
    31a8:	14 c0       	rjmp	.+40     	; 0x31d2 <vfprintf+0x326>
    31aa:	f0 fe       	sbrs	r15, 0
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <vfprintf+0x320>
    31ae:	1e 15       	cp	r17, r14
    31b0:	10 f0       	brcs	.+4      	; 0x31b6 <vfprintf+0x30a>
    31b2:	9d 2c       	mov	r9, r13
    31b4:	0b c0       	rjmp	.+22     	; 0x31cc <vfprintf+0x320>
    31b6:	9d 2c       	mov	r9, r13
    31b8:	9e 0c       	add	r9, r14
    31ba:	91 1a       	sub	r9, r17
    31bc:	1e 2d       	mov	r17, r14
    31be:	06 c0       	rjmp	.+12     	; 0x31cc <vfprintf+0x320>
    31c0:	80 e2       	ldi	r24, 0x20	; 32
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	b3 01       	movw	r22, r6
    31c6:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    31ca:	1f 5f       	subi	r17, 0xFF	; 255
    31cc:	1e 15       	cp	r17, r14
    31ce:	c0 f3       	brcs	.-16     	; 0x31c0 <vfprintf+0x314>
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <vfprintf+0x32e>
    31d2:	1e 15       	cp	r17, r14
    31d4:	10 f4       	brcc	.+4      	; 0x31da <vfprintf+0x32e>
    31d6:	e1 1a       	sub	r14, r17
    31d8:	01 c0       	rjmp	.+2      	; 0x31dc <vfprintf+0x330>
    31da:	ee 24       	eor	r14, r14
    31dc:	04 ff       	sbrs	r16, 4
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <vfprintf+0x352>
    31e0:	80 e3       	ldi	r24, 0x30	; 48
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	b3 01       	movw	r22, r6
    31e6:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    31ea:	02 ff       	sbrs	r16, 2
    31ec:	1d c0       	rjmp	.+58     	; 0x3228 <vfprintf+0x37c>
    31ee:	01 fd       	sbrc	r16, 1
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <vfprintf+0x34c>
    31f2:	88 e7       	ldi	r24, 0x78	; 120
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e c0       	rjmp	.+28     	; 0x3214 <vfprintf+0x368>
    31f8:	88 e5       	ldi	r24, 0x58	; 88
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0b c0       	rjmp	.+22     	; 0x3214 <vfprintf+0x368>
    31fe:	80 2f       	mov	r24, r16
    3200:	86 78       	andi	r24, 0x86	; 134
    3202:	91 f0       	breq	.+36     	; 0x3228 <vfprintf+0x37c>
    3204:	01 ff       	sbrs	r16, 1
    3206:	02 c0       	rjmp	.+4      	; 0x320c <vfprintf+0x360>
    3208:	8b e2       	ldi	r24, 0x2B	; 43
    320a:	01 c0       	rjmp	.+2      	; 0x320e <vfprintf+0x362>
    320c:	80 e2       	ldi	r24, 0x20	; 32
    320e:	f7 fc       	sbrc	r15, 7
    3210:	8d e2       	ldi	r24, 0x2D	; 45
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	b3 01       	movw	r22, r6
    3216:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    321a:	06 c0       	rjmp	.+12     	; 0x3228 <vfprintf+0x37c>
    321c:	80 e3       	ldi	r24, 0x30	; 48
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	b3 01       	movw	r22, r6
    3222:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    3226:	9a 94       	dec	r9
    3228:	d9 14       	cp	r13, r9
    322a:	c0 f3       	brcs	.-16     	; 0x321c <vfprintf+0x370>
    322c:	da 94       	dec	r13
    322e:	f1 01       	movw	r30, r2
    3230:	ed 0d       	add	r30, r13
    3232:	f1 1d       	adc	r31, r1
    3234:	80 81       	ld	r24, Z
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	b3 01       	movw	r22, r6
    323a:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    323e:	dd 20       	and	r13, r13
    3240:	a9 f7       	brne	.-22     	; 0x322c <vfprintf+0x380>
    3242:	06 c0       	rjmp	.+12     	; 0x3250 <vfprintf+0x3a4>
    3244:	80 e2       	ldi	r24, 0x20	; 32
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	b3 01       	movw	r22, r6
    324a:	0e 94 49 19 	call	0x3292	; 0x3292 <fputc>
    324e:	ea 94       	dec	r14
    3250:	ee 20       	and	r14, r14
    3252:	c1 f7       	brne	.-16     	; 0x3244 <vfprintf+0x398>
    3254:	43 ce       	rjmp	.-890    	; 0x2edc <vfprintf+0x30>
    3256:	f3 01       	movw	r30, r6
    3258:	66 81       	ldd	r22, Z+6	; 0x06
    325a:	77 81       	ldd	r23, Z+7	; 0x07
    325c:	cb 01       	movw	r24, r22
    325e:	2b 96       	adiw	r28, 0x0b	; 11
    3260:	e2 e1       	ldi	r30, 0x12	; 18
    3262:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__>

00003266 <strnlen_P>:
    3266:	fc 01       	movw	r30, r24
    3268:	05 90       	lpm	r0, Z+
    326a:	61 50       	subi	r22, 0x01	; 1
    326c:	70 40       	sbci	r23, 0x00	; 0
    326e:	01 10       	cpse	r0, r1
    3270:	d8 f7       	brcc	.-10     	; 0x3268 <strnlen_P+0x2>
    3272:	80 95       	com	r24
    3274:	90 95       	com	r25
    3276:	8e 0f       	add	r24, r30
    3278:	9f 1f       	adc	r25, r31
    327a:	08 95       	ret

0000327c <strnlen>:
    327c:	fc 01       	movw	r30, r24
    327e:	61 50       	subi	r22, 0x01	; 1
    3280:	70 40       	sbci	r23, 0x00	; 0
    3282:	01 90       	ld	r0, Z+
    3284:	01 10       	cpse	r0, r1
    3286:	d8 f7       	brcc	.-10     	; 0x327e <strnlen+0x2>
    3288:	80 95       	com	r24
    328a:	90 95       	com	r25
    328c:	8e 0f       	add	r24, r30
    328e:	9f 1f       	adc	r25, r31
    3290:	08 95       	ret

00003292 <fputc>:
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	8c 01       	movw	r16, r24
    329c:	eb 01       	movw	r28, r22
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	81 ff       	sbrs	r24, 1
    32a2:	1b c0       	rjmp	.+54     	; 0x32da <fputc+0x48>
    32a4:	82 ff       	sbrs	r24, 2
    32a6:	0d c0       	rjmp	.+26     	; 0x32c2 <fputc+0x30>
    32a8:	2e 81       	ldd	r18, Y+6	; 0x06
    32aa:	3f 81       	ldd	r19, Y+7	; 0x07
    32ac:	8c 81       	ldd	r24, Y+4	; 0x04
    32ae:	9d 81       	ldd	r25, Y+5	; 0x05
    32b0:	28 17       	cp	r18, r24
    32b2:	39 07       	cpc	r19, r25
    32b4:	64 f4       	brge	.+24     	; 0x32ce <fputc+0x3c>
    32b6:	e8 81       	ld	r30, Y
    32b8:	f9 81       	ldd	r31, Y+1	; 0x01
    32ba:	01 93       	st	Z+, r16
    32bc:	f9 83       	std	Y+1, r31	; 0x01
    32be:	e8 83       	st	Y, r30
    32c0:	06 c0       	rjmp	.+12     	; 0x32ce <fputc+0x3c>
    32c2:	e8 85       	ldd	r30, Y+8	; 0x08
    32c4:	f9 85       	ldd	r31, Y+9	; 0x09
    32c6:	80 2f       	mov	r24, r16
    32c8:	09 95       	icall
    32ca:	89 2b       	or	r24, r25
    32cc:	31 f4       	brne	.+12     	; 0x32da <fputc+0x48>
    32ce:	8e 81       	ldd	r24, Y+6	; 0x06
    32d0:	9f 81       	ldd	r25, Y+7	; 0x07
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	9f 83       	std	Y+7, r25	; 0x07
    32d6:	8e 83       	std	Y+6, r24	; 0x06
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <fputc+0x4c>
    32da:	0f ef       	ldi	r16, 0xFF	; 255
    32dc:	1f ef       	ldi	r17, 0xFF	; 255
    32de:	c8 01       	movw	r24, r16
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	08 95       	ret

000032ea <__ultoa_invert>:
    32ea:	fa 01       	movw	r30, r20
    32ec:	aa 27       	eor	r26, r26
    32ee:	28 30       	cpi	r18, 0x08	; 8
    32f0:	51 f1       	breq	.+84     	; 0x3346 <__ultoa_invert+0x5c>
    32f2:	20 31       	cpi	r18, 0x10	; 16
    32f4:	81 f1       	breq	.+96     	; 0x3356 <__ultoa_invert+0x6c>
    32f6:	e8 94       	clt
    32f8:	6f 93       	push	r22
    32fa:	6e 7f       	andi	r22, 0xFE	; 254
    32fc:	6e 5f       	subi	r22, 0xFE	; 254
    32fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3300:	8f 4f       	sbci	r24, 0xFF	; 255
    3302:	9f 4f       	sbci	r25, 0xFF	; 255
    3304:	af 4f       	sbci	r26, 0xFF	; 255
    3306:	b1 e0       	ldi	r27, 0x01	; 1
    3308:	3e d0       	rcall	.+124    	; 0x3386 <__ultoa_invert+0x9c>
    330a:	b4 e0       	ldi	r27, 0x04	; 4
    330c:	3c d0       	rcall	.+120    	; 0x3386 <__ultoa_invert+0x9c>
    330e:	67 0f       	add	r22, r23
    3310:	78 1f       	adc	r23, r24
    3312:	89 1f       	adc	r24, r25
    3314:	9a 1f       	adc	r25, r26
    3316:	a1 1d       	adc	r26, r1
    3318:	68 0f       	add	r22, r24
    331a:	79 1f       	adc	r23, r25
    331c:	8a 1f       	adc	r24, r26
    331e:	91 1d       	adc	r25, r1
    3320:	a1 1d       	adc	r26, r1
    3322:	6a 0f       	add	r22, r26
    3324:	71 1d       	adc	r23, r1
    3326:	81 1d       	adc	r24, r1
    3328:	91 1d       	adc	r25, r1
    332a:	a1 1d       	adc	r26, r1
    332c:	20 d0       	rcall	.+64     	; 0x336e <__ultoa_invert+0x84>
    332e:	09 f4       	brne	.+2      	; 0x3332 <__ultoa_invert+0x48>
    3330:	68 94       	set
    3332:	3f 91       	pop	r19
    3334:	2a e0       	ldi	r18, 0x0A	; 10
    3336:	26 9f       	mul	r18, r22
    3338:	11 24       	eor	r1, r1
    333a:	30 19       	sub	r19, r0
    333c:	30 5d       	subi	r19, 0xD0	; 208
    333e:	31 93       	st	Z+, r19
    3340:	de f6       	brtc	.-74     	; 0x32f8 <__ultoa_invert+0xe>
    3342:	cf 01       	movw	r24, r30
    3344:	08 95       	ret
    3346:	46 2f       	mov	r20, r22
    3348:	47 70       	andi	r20, 0x07	; 7
    334a:	40 5d       	subi	r20, 0xD0	; 208
    334c:	41 93       	st	Z+, r20
    334e:	b3 e0       	ldi	r27, 0x03	; 3
    3350:	0f d0       	rcall	.+30     	; 0x3370 <__ultoa_invert+0x86>
    3352:	c9 f7       	brne	.-14     	; 0x3346 <__ultoa_invert+0x5c>
    3354:	f6 cf       	rjmp	.-20     	; 0x3342 <__ultoa_invert+0x58>
    3356:	46 2f       	mov	r20, r22
    3358:	4f 70       	andi	r20, 0x0F	; 15
    335a:	40 5d       	subi	r20, 0xD0	; 208
    335c:	4a 33       	cpi	r20, 0x3A	; 58
    335e:	18 f0       	brcs	.+6      	; 0x3366 <__ultoa_invert+0x7c>
    3360:	49 5d       	subi	r20, 0xD9	; 217
    3362:	31 fd       	sbrc	r19, 1
    3364:	40 52       	subi	r20, 0x20	; 32
    3366:	41 93       	st	Z+, r20
    3368:	02 d0       	rcall	.+4      	; 0x336e <__ultoa_invert+0x84>
    336a:	a9 f7       	brne	.-22     	; 0x3356 <__ultoa_invert+0x6c>
    336c:	ea cf       	rjmp	.-44     	; 0x3342 <__ultoa_invert+0x58>
    336e:	b4 e0       	ldi	r27, 0x04	; 4
    3370:	a6 95       	lsr	r26
    3372:	97 95       	ror	r25
    3374:	87 95       	ror	r24
    3376:	77 95       	ror	r23
    3378:	67 95       	ror	r22
    337a:	ba 95       	dec	r27
    337c:	c9 f7       	brne	.-14     	; 0x3370 <__ultoa_invert+0x86>
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	61 05       	cpc	r22, r1
    3382:	71 05       	cpc	r23, r1
    3384:	08 95       	ret
    3386:	9b 01       	movw	r18, r22
    3388:	ac 01       	movw	r20, r24
    338a:	0a 2e       	mov	r0, r26
    338c:	06 94       	lsr	r0
    338e:	57 95       	ror	r21
    3390:	47 95       	ror	r20
    3392:	37 95       	ror	r19
    3394:	27 95       	ror	r18
    3396:	ba 95       	dec	r27
    3398:	c9 f7       	brne	.-14     	; 0x338c <__ultoa_invert+0xa2>
    339a:	62 0f       	add	r22, r18
    339c:	73 1f       	adc	r23, r19
    339e:	84 1f       	adc	r24, r20
    33a0:	95 1f       	adc	r25, r21
    33a2:	a0 1d       	adc	r26, r0
    33a4:	08 95       	ret

000033a6 <_exit>:
    33a6:	f8 94       	cli

000033a8 <__stop_program>:
    33a8:	ff cf       	rjmp	.-2      	; 0x33a8 <__stop_program>
